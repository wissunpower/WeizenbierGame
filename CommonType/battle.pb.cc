// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wzbgame {
namespace message {
namespace battle {
constexpr PositionMoveRequest::PositionMoveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PositionMoveRequestDefaultTypeInternal {
  constexpr PositionMoveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionMoveRequestDefaultTypeInternal() {}
  union {
    PositionMoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionMoveRequestDefaultTypeInternal _PositionMoveRequest_default_instance_;
constexpr PositionMoveResponse::PositionMoveResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , result_(0){}
struct PositionMoveResponseDefaultTypeInternal {
  constexpr PositionMoveResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionMoveResponseDefaultTypeInternal() {}
  union {
    PositionMoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionMoveResponseDefaultTypeInternal _PositionMoveResponse_default_instance_;
}  // namespace battle
}  // namespace message
}  // namespace wzbgame
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_battle_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_battle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_battle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_battle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wzbgame::message::battle::PositionMoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wzbgame::message::battle::PositionMoveResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wzbgame::message::battle::PositionMoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wzbgame::message::battle::PositionMoveResponse, result_),
  PROTOBUF_FIELD_OFFSET(::wzbgame::message::battle::PositionMoveResponse, position_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wzbgame::message::battle::PositionMoveRequest)},
  { 5, 12, sizeof(::wzbgame::message::battle::PositionMoveResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wzbgame::message::battle::_PositionMoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wzbgame::message::battle::_PositionMoveResponse_default_instance_),
};

const char descriptor_table_protodef_battle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014battle.proto\022\026wzbgame.message.battle\032\013"
  "model.proto\"\025\n\023PositionMoveRequest\"s\n\024Po"
  "sitionMoveResponse\022\023\n\006Result\030\001 \001(\005H\000\210\001\001\022"
  ".\n\010position\030\002 \001(\0132\027.wzbgame.model.Positi"
  "onH\001\210\001\001B\t\n\007_ResultB\013\n\t_positionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_battle_2eproto_deps[1] = {
  &::descriptor_table_model_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_battle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_2eproto = {
  false, false, 199, descriptor_table_protodef_battle_2eproto, "battle.proto", 
  &descriptor_table_battle_2eproto_once, descriptor_table_battle_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_battle_2eproto::offsets,
  file_level_metadata_battle_2eproto, file_level_enum_descriptors_battle_2eproto, file_level_service_descriptors_battle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_battle_2eproto_getter() {
  return &descriptor_table_battle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_battle_2eproto(&descriptor_table_battle_2eproto);
namespace wzbgame {
namespace message {
namespace battle {

// ===================================================================

class PositionMoveRequest::_Internal {
 public:
};

PositionMoveRequest::PositionMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wzbgame.message.battle.PositionMoveRequest)
}
PositionMoveRequest::PositionMoveRequest(const PositionMoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wzbgame.message.battle.PositionMoveRequest)
}

inline void PositionMoveRequest::SharedCtor() {
}

PositionMoveRequest::~PositionMoveRequest() {
  // @@protoc_insertion_point(destructor:wzbgame.message.battle.PositionMoveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PositionMoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionMoveRequest::ArenaDtor(void* object) {
  PositionMoveRequest* _this = reinterpret_cast< PositionMoveRequest* >(object);
  (void)_this;
}
void PositionMoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionMoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wzbgame.message.battle.PositionMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionMoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionMoveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wzbgame.message.battle.PositionMoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wzbgame.message.battle.PositionMoveRequest)
  return target;
}

size_t PositionMoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wzbgame.message.battle.PositionMoveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionMoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PositionMoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionMoveRequest::GetClassData() const { return &_class_data_; }

void PositionMoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PositionMoveRequest *>(to)->MergeFrom(
      static_cast<const PositionMoveRequest &>(from));
}


void PositionMoveRequest::MergeFrom(const PositionMoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wzbgame.message.battle.PositionMoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionMoveRequest::CopyFrom(const PositionMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wzbgame.message.battle.PositionMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionMoveRequest::IsInitialized() const {
  return true;
}

void PositionMoveRequest::InternalSwap(PositionMoveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionMoveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[0]);
}

// ===================================================================

class PositionMoveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionMoveResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wzbgame::model::Position& position(const PositionMoveResponse* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wzbgame::model::Position&
PositionMoveResponse::_Internal::position(const PositionMoveResponse* msg) {
  return *msg->position_;
}
void PositionMoveResponse::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PositionMoveResponse::PositionMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wzbgame.message.battle.PositionMoveResponse)
}
PositionMoveResponse::PositionMoveResponse(const PositionMoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::wzbgame::model::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:wzbgame.message.battle.PositionMoveResponse)
}

inline void PositionMoveResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&position_)) + sizeof(result_));
}

PositionMoveResponse::~PositionMoveResponse() {
  // @@protoc_insertion_point(destructor:wzbgame.message.battle.PositionMoveResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PositionMoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void PositionMoveResponse::ArenaDtor(void* object) {
  PositionMoveResponse* _this = reinterpret_cast< PositionMoveResponse* >(object);
  (void)_this;
}
void PositionMoveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionMoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wzbgame.message.battle.PositionMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionMoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 Result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .wzbgame.model.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionMoveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wzbgame.message.battle.PositionMoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 Result = 1;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .wzbgame.model.Position position = 2;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wzbgame.message.battle.PositionMoveResponse)
  return target;
}

size_t PositionMoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wzbgame.message.battle.PositionMoveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wzbgame.model.Position position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 Result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionMoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PositionMoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionMoveResponse::GetClassData() const { return &_class_data_; }

void PositionMoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PositionMoveResponse *>(to)->MergeFrom(
      static_cast<const PositionMoveResponse &>(from));
}


void PositionMoveResponse::MergeFrom(const PositionMoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wzbgame.message.battle.PositionMoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::wzbgame::model::Position::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionMoveResponse::CopyFrom(const PositionMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wzbgame.message.battle.PositionMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionMoveResponse::IsInitialized() const {
  return true;
}

void PositionMoveResponse::InternalSwap(PositionMoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionMoveResponse, result_)
      + sizeof(PositionMoveResponse::result_)
      - PROTOBUF_FIELD_OFFSET(PositionMoveResponse, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionMoveResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_battle_2eproto_getter, &descriptor_table_battle_2eproto_once,
      file_level_metadata_battle_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace battle
}  // namespace message
}  // namespace wzbgame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wzbgame::message::battle::PositionMoveRequest* Arena::CreateMaybeMessage< ::wzbgame::message::battle::PositionMoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wzbgame::message::battle::PositionMoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wzbgame::message::battle::PositionMoveResponse* Arena::CreateMaybeMessage< ::wzbgame::message::battle::PositionMoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wzbgame::message::battle::PositionMoveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
