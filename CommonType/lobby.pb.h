// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lobby_2eproto;
namespace wzbgame {
namespace message {
namespace lobby {
class CharacterCreateRequest;
struct CharacterCreateRequestDefaultTypeInternal;
extern CharacterCreateRequestDefaultTypeInternal _CharacterCreateRequest_default_instance_;
class CharacterCreateResponse;
struct CharacterCreateResponseDefaultTypeInternal;
extern CharacterCreateResponseDefaultTypeInternal _CharacterCreateResponse_default_instance_;
class CharacterDeleteRequest;
struct CharacterDeleteRequestDefaultTypeInternal;
extern CharacterDeleteRequestDefaultTypeInternal _CharacterDeleteRequest_default_instance_;
class CharacterDeleteResponse;
struct CharacterDeleteResponseDefaultTypeInternal;
extern CharacterDeleteResponseDefaultTypeInternal _CharacterDeleteResponse_default_instance_;
class CharacterSelectRequest;
struct CharacterSelectRequestDefaultTypeInternal;
extern CharacterSelectRequestDefaultTypeInternal _CharacterSelectRequest_default_instance_;
class CharacterSelectResponse;
struct CharacterSelectResponseDefaultTypeInternal;
extern CharacterSelectResponseDefaultTypeInternal _CharacterSelectResponse_default_instance_;
class InGameEnterRequest;
struct InGameEnterRequestDefaultTypeInternal;
extern InGameEnterRequestDefaultTypeInternal _InGameEnterRequest_default_instance_;
class InGameEnterResponse;
struct InGameEnterResponseDefaultTypeInternal;
extern InGameEnterResponseDefaultTypeInternal _InGameEnterResponse_default_instance_;
}  // namespace lobby
}  // namespace message
}  // namespace wzbgame
PROTOBUF_NAMESPACE_OPEN
template<> ::wzbgame::message::lobby::CharacterCreateRequest* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterCreateRequest>(Arena*);
template<> ::wzbgame::message::lobby::CharacterCreateResponse* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterCreateResponse>(Arena*);
template<> ::wzbgame::message::lobby::CharacterDeleteRequest* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterDeleteRequest>(Arena*);
template<> ::wzbgame::message::lobby::CharacterDeleteResponse* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterDeleteResponse>(Arena*);
template<> ::wzbgame::message::lobby::CharacterSelectRequest* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterSelectRequest>(Arena*);
template<> ::wzbgame::message::lobby::CharacterSelectResponse* Arena::CreateMaybeMessage<::wzbgame::message::lobby::CharacterSelectResponse>(Arena*);
template<> ::wzbgame::message::lobby::InGameEnterRequest* Arena::CreateMaybeMessage<::wzbgame::message::lobby::InGameEnterRequest>(Arena*);
template<> ::wzbgame::message::lobby::InGameEnterResponse* Arena::CreateMaybeMessage<::wzbgame::message::lobby::InGameEnterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wzbgame {
namespace message {
namespace lobby {

// ===================================================================

class CharacterCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterCreateRequest) */ {
 public:
  inline CharacterCreateRequest() : CharacterCreateRequest(nullptr) {}
  ~CharacterCreateRequest() override;
  explicit constexpr CharacterCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterCreateRequest(const CharacterCreateRequest& from);
  CharacterCreateRequest(CharacterCreateRequest&& from) noexcept
    : CharacterCreateRequest() {
    *this = ::std::move(from);
  }

  inline CharacterCreateRequest& operator=(const CharacterCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterCreateRequest& operator=(CharacterCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterCreateRequest*>(
               &_CharacterCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterCreateRequest& a, CharacterCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterCreateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterCreateRequest* New() const final {
    return new CharacterCreateRequest();
  }

  CharacterCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterCreateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterCreateRequest";
  }
  protected:
  explicit CharacterCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // optional bytes character_id = 1;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const std::string& character_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_id();
  void set_allocated_character_id(std::string* character_id);
  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(const std::string& value);
  std::string* _internal_mutable_character_id();
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CharacterCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterCreateResponse) */ {
 public:
  inline CharacterCreateResponse() : CharacterCreateResponse(nullptr) {}
  ~CharacterCreateResponse() override;
  explicit constexpr CharacterCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterCreateResponse(const CharacterCreateResponse& from);
  CharacterCreateResponse(CharacterCreateResponse&& from) noexcept
    : CharacterCreateResponse() {
    *this = ::std::move(from);
  }

  inline CharacterCreateResponse& operator=(const CharacterCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterCreateResponse& operator=(CharacterCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterCreateResponse*>(
               &_CharacterCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterCreateResponse& a, CharacterCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterCreateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterCreateResponse* New() const final {
    return new CharacterCreateResponse();
  }

  CharacterCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterCreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterCreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterCreateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterCreateResponse";
  }
  protected:
  explicit CharacterCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional int32 Result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CharacterDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterDeleteRequest) */ {
 public:
  inline CharacterDeleteRequest() : CharacterDeleteRequest(nullptr) {}
  ~CharacterDeleteRequest() override;
  explicit constexpr CharacterDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterDeleteRequest(const CharacterDeleteRequest& from);
  CharacterDeleteRequest(CharacterDeleteRequest&& from) noexcept
    : CharacterDeleteRequest() {
    *this = ::std::move(from);
  }

  inline CharacterDeleteRequest& operator=(const CharacterDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterDeleteRequest& operator=(CharacterDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterDeleteRequest*>(
               &_CharacterDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CharacterDeleteRequest& a, CharacterDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterDeleteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterDeleteRequest* New() const final {
    return new CharacterDeleteRequest();
  }

  CharacterDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterDeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterDeleteRequest";
  }
  protected:
  explicit CharacterDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // optional bytes character_id = 1;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const std::string& character_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_id();
  void set_allocated_character_id(std::string* character_id);
  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(const std::string& value);
  std::string* _internal_mutable_character_id();
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CharacterDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterDeleteResponse) */ {
 public:
  inline CharacterDeleteResponse() : CharacterDeleteResponse(nullptr) {}
  ~CharacterDeleteResponse() override;
  explicit constexpr CharacterDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterDeleteResponse(const CharacterDeleteResponse& from);
  CharacterDeleteResponse(CharacterDeleteResponse&& from) noexcept
    : CharacterDeleteResponse() {
    *this = ::std::move(from);
  }

  inline CharacterDeleteResponse& operator=(const CharacterDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterDeleteResponse& operator=(CharacterDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterDeleteResponse*>(
               &_CharacterDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CharacterDeleteResponse& a, CharacterDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterDeleteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterDeleteResponse* New() const final {
    return new CharacterDeleteResponse();
  }

  CharacterDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterDeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterDeleteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterDeleteResponse";
  }
  protected:
  explicit CharacterDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional int32 Result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CharacterSelectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterSelectRequest) */ {
 public:
  inline CharacterSelectRequest() : CharacterSelectRequest(nullptr) {}
  ~CharacterSelectRequest() override;
  explicit constexpr CharacterSelectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterSelectRequest(const CharacterSelectRequest& from);
  CharacterSelectRequest(CharacterSelectRequest&& from) noexcept
    : CharacterSelectRequest() {
    *this = ::std::move(from);
  }

  inline CharacterSelectRequest& operator=(const CharacterSelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterSelectRequest& operator=(CharacterSelectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterSelectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterSelectRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterSelectRequest*>(
               &_CharacterSelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CharacterSelectRequest& a, CharacterSelectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterSelectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterSelectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterSelectRequest* New() const final {
    return new CharacterSelectRequest();
  }

  CharacterSelectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterSelectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterSelectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterSelectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterSelectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterSelectRequest";
  }
  protected:
  explicit CharacterSelectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // optional bytes character_id = 1;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const std::string& character_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_id();
  void set_allocated_character_id(std::string* character_id);
  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(const std::string& value);
  std::string* _internal_mutable_character_id();
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterSelectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CharacterSelectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.CharacterSelectResponse) */ {
 public:
  inline CharacterSelectResponse() : CharacterSelectResponse(nullptr) {}
  ~CharacterSelectResponse() override;
  explicit constexpr CharacterSelectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterSelectResponse(const CharacterSelectResponse& from);
  CharacterSelectResponse(CharacterSelectResponse&& from) noexcept
    : CharacterSelectResponse() {
    *this = ::std::move(from);
  }

  inline CharacterSelectResponse& operator=(const CharacterSelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterSelectResponse& operator=(CharacterSelectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterSelectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterSelectResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterSelectResponse*>(
               &_CharacterSelectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CharacterSelectResponse& a, CharacterSelectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterSelectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterSelectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterSelectResponse* New() const final {
    return new CharacterSelectResponse();
  }

  CharacterSelectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterSelectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterSelectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterSelectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterSelectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.CharacterSelectResponse";
  }
  protected:
  explicit CharacterSelectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional int32 Result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.CharacterSelectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class InGameEnterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.InGameEnterRequest) */ {
 public:
  inline InGameEnterRequest() : InGameEnterRequest(nullptr) {}
  ~InGameEnterRequest() override;
  explicit constexpr InGameEnterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InGameEnterRequest(const InGameEnterRequest& from);
  InGameEnterRequest(InGameEnterRequest&& from) noexcept
    : InGameEnterRequest() {
    *this = ::std::move(from);
  }

  inline InGameEnterRequest& operator=(const InGameEnterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InGameEnterRequest& operator=(InGameEnterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InGameEnterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InGameEnterRequest* internal_default_instance() {
    return reinterpret_cast<const InGameEnterRequest*>(
               &_InGameEnterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InGameEnterRequest& a, InGameEnterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InGameEnterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InGameEnterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InGameEnterRequest* New() const final {
    return new InGameEnterRequest();
  }

  InGameEnterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InGameEnterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InGameEnterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InGameEnterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InGameEnterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.InGameEnterRequest";
  }
  protected:
  explicit InGameEnterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // optional bytes character_id = 1;
  bool has_character_id() const;
  private:
  bool _internal_has_character_id() const;
  public:
  void clear_character_id();
  const std::string& character_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_character_id();
  void set_allocated_character_id(std::string* character_id);
  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(const std::string& value);
  std::string* _internal_mutable_character_id();
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.InGameEnterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class InGameEnterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.lobby.InGameEnterResponse) */ {
 public:
  inline InGameEnterResponse() : InGameEnterResponse(nullptr) {}
  ~InGameEnterResponse() override;
  explicit constexpr InGameEnterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InGameEnterResponse(const InGameEnterResponse& from);
  InGameEnterResponse(InGameEnterResponse&& from) noexcept
    : InGameEnterResponse() {
    *this = ::std::move(from);
  }

  inline InGameEnterResponse& operator=(const InGameEnterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InGameEnterResponse& operator=(InGameEnterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InGameEnterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InGameEnterResponse* internal_default_instance() {
    return reinterpret_cast<const InGameEnterResponse*>(
               &_InGameEnterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InGameEnterResponse& a, InGameEnterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InGameEnterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InGameEnterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InGameEnterResponse* New() const final {
    return new InGameEnterResponse();
  }

  InGameEnterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InGameEnterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InGameEnterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InGameEnterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InGameEnterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.lobby.InGameEnterResponse";
  }
  protected:
  explicit InGameEnterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional int32 Result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.lobby.InGameEnterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_lobby_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CharacterCreateRequest

// optional bytes character_id = 1;
inline bool CharacterCreateRequest::_internal_has_character_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterCreateRequest::has_character_id() const {
  return _internal_has_character_id();
}
inline void CharacterCreateRequest::clear_character_id() {
  character_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CharacterCreateRequest::character_id() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterCreateRequest.character_id)
  return _internal_character_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterCreateRequest::set_character_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 character_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterCreateRequest.character_id)
}
inline std::string* CharacterCreateRequest::mutable_character_id() {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.lobby.CharacterCreateRequest.character_id)
  return _s;
}
inline const std::string& CharacterCreateRequest::_internal_character_id() const {
  return character_id_.Get();
}
inline void CharacterCreateRequest::_internal_set_character_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterCreateRequest::_internal_mutable_character_id() {
  _has_bits_[0] |= 0x00000001u;
  return character_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterCreateRequest::release_character_id() {
  // @@protoc_insertion_point(field_release:wzbgame.message.lobby.CharacterCreateRequest.character_id)
  if (!_internal_has_character_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return character_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterCreateRequest::set_allocated_character_id(std::string* character_id) {
  if (character_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.lobby.CharacterCreateRequest.character_id)
}

// -------------------------------------------------------------------

// CharacterCreateResponse

// optional int32 Result = 1;
inline bool CharacterCreateResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterCreateResponse::has_result() const {
  return _internal_has_result();
}
inline void CharacterCreateResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterCreateResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterCreateResponse.Result)
  return _internal_result();
}
inline void CharacterCreateResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CharacterCreateResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterCreateResponse.Result)
}

// -------------------------------------------------------------------

// CharacterDeleteRequest

// optional bytes character_id = 1;
inline bool CharacterDeleteRequest::_internal_has_character_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterDeleteRequest::has_character_id() const {
  return _internal_has_character_id();
}
inline void CharacterDeleteRequest::clear_character_id() {
  character_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CharacterDeleteRequest::character_id() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterDeleteRequest.character_id)
  return _internal_character_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterDeleteRequest::set_character_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 character_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterDeleteRequest.character_id)
}
inline std::string* CharacterDeleteRequest::mutable_character_id() {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.lobby.CharacterDeleteRequest.character_id)
  return _s;
}
inline const std::string& CharacterDeleteRequest::_internal_character_id() const {
  return character_id_.Get();
}
inline void CharacterDeleteRequest::_internal_set_character_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterDeleteRequest::_internal_mutable_character_id() {
  _has_bits_[0] |= 0x00000001u;
  return character_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterDeleteRequest::release_character_id() {
  // @@protoc_insertion_point(field_release:wzbgame.message.lobby.CharacterDeleteRequest.character_id)
  if (!_internal_has_character_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return character_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterDeleteRequest::set_allocated_character_id(std::string* character_id) {
  if (character_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.lobby.CharacterDeleteRequest.character_id)
}

// -------------------------------------------------------------------

// CharacterDeleteResponse

// optional int32 Result = 1;
inline bool CharacterDeleteResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterDeleteResponse::has_result() const {
  return _internal_has_result();
}
inline void CharacterDeleteResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterDeleteResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterDeleteResponse::result() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterDeleteResponse.Result)
  return _internal_result();
}
inline void CharacterDeleteResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CharacterDeleteResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterDeleteResponse.Result)
}

// -------------------------------------------------------------------

// CharacterSelectRequest

// optional bytes character_id = 1;
inline bool CharacterSelectRequest::_internal_has_character_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterSelectRequest::has_character_id() const {
  return _internal_has_character_id();
}
inline void CharacterSelectRequest::clear_character_id() {
  character_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CharacterSelectRequest::character_id() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterSelectRequest.character_id)
  return _internal_character_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterSelectRequest::set_character_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 character_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterSelectRequest.character_id)
}
inline std::string* CharacterSelectRequest::mutable_character_id() {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.lobby.CharacterSelectRequest.character_id)
  return _s;
}
inline const std::string& CharacterSelectRequest::_internal_character_id() const {
  return character_id_.Get();
}
inline void CharacterSelectRequest::_internal_set_character_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterSelectRequest::_internal_mutable_character_id() {
  _has_bits_[0] |= 0x00000001u;
  return character_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterSelectRequest::release_character_id() {
  // @@protoc_insertion_point(field_release:wzbgame.message.lobby.CharacterSelectRequest.character_id)
  if (!_internal_has_character_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return character_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterSelectRequest::set_allocated_character_id(std::string* character_id) {
  if (character_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.lobby.CharacterSelectRequest.character_id)
}

// -------------------------------------------------------------------

// CharacterSelectResponse

// optional int32 Result = 1;
inline bool CharacterSelectResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CharacterSelectResponse::has_result() const {
  return _internal_has_result();
}
inline void CharacterSelectResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterSelectResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterSelectResponse::result() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.CharacterSelectResponse.Result)
  return _internal_result();
}
inline void CharacterSelectResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CharacterSelectResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.CharacterSelectResponse.Result)
}

// -------------------------------------------------------------------

// InGameEnterRequest

// optional bytes character_id = 1;
inline bool InGameEnterRequest::_internal_has_character_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InGameEnterRequest::has_character_id() const {
  return _internal_has_character_id();
}
inline void InGameEnterRequest::clear_character_id() {
  character_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InGameEnterRequest::character_id() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.InGameEnterRequest.character_id)
  return _internal_character_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InGameEnterRequest::set_character_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 character_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.InGameEnterRequest.character_id)
}
inline std::string* InGameEnterRequest::mutable_character_id() {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.lobby.InGameEnterRequest.character_id)
  return _s;
}
inline const std::string& InGameEnterRequest::_internal_character_id() const {
  return character_id_.Get();
}
inline void InGameEnterRequest::_internal_set_character_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InGameEnterRequest::_internal_mutable_character_id() {
  _has_bits_[0] |= 0x00000001u;
  return character_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InGameEnterRequest::release_character_id() {
  // @@protoc_insertion_point(field_release:wzbgame.message.lobby.InGameEnterRequest.character_id)
  if (!_internal_has_character_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return character_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InGameEnterRequest::set_allocated_character_id(std::string* character_id) {
  if (character_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.lobby.InGameEnterRequest.character_id)
}

// -------------------------------------------------------------------

// InGameEnterResponse

// optional int32 Result = 1;
inline bool InGameEnterResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InGameEnterResponse::has_result() const {
  return _internal_has_result();
}
inline void InGameEnterResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameEnterResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InGameEnterResponse::result() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.lobby.InGameEnterResponse.Result)
  return _internal_result();
}
inline void InGameEnterResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void InGameEnterResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.lobby.InGameEnterResponse.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lobby
}  // namespace message
}  // namespace wzbgame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
