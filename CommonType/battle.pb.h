// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_2eproto;
namespace wzbgame {
namespace message {
namespace battle {
class PositionMoveRequest;
struct PositionMoveRequestDefaultTypeInternal;
extern PositionMoveRequestDefaultTypeInternal _PositionMoveRequest_default_instance_;
class PositionMoveResponse;
struct PositionMoveResponseDefaultTypeInternal;
extern PositionMoveResponseDefaultTypeInternal _PositionMoveResponse_default_instance_;
}  // namespace battle
}  // namespace message
}  // namespace wzbgame
PROTOBUF_NAMESPACE_OPEN
template<> ::wzbgame::message::battle::PositionMoveRequest* Arena::CreateMaybeMessage<::wzbgame::message::battle::PositionMoveRequest>(Arena*);
template<> ::wzbgame::message::battle::PositionMoveResponse* Arena::CreateMaybeMessage<::wzbgame::message::battle::PositionMoveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wzbgame {
namespace message {
namespace battle {

// ===================================================================

class PositionMoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.battle.PositionMoveRequest) */ {
 public:
  inline PositionMoveRequest() : PositionMoveRequest(nullptr) {}
  ~PositionMoveRequest() override;
  explicit constexpr PositionMoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionMoveRequest(const PositionMoveRequest& from);
  PositionMoveRequest(PositionMoveRequest&& from) noexcept
    : PositionMoveRequest() {
    *this = ::std::move(from);
  }

  inline PositionMoveRequest& operator=(const PositionMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionMoveRequest& operator=(PositionMoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionMoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionMoveRequest* internal_default_instance() {
    return reinterpret_cast<const PositionMoveRequest*>(
               &_PositionMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionMoveRequest& a, PositionMoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionMoveRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionMoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionMoveRequest* New() const final {
    return new PositionMoveRequest();
  }

  PositionMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionMoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionMoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionMoveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.battle.PositionMoveRequest";
  }
  protected:
  explicit PositionMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wzbgame.message.battle.PositionMoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class PositionMoveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.battle.PositionMoveResponse) */ {
 public:
  inline PositionMoveResponse() : PositionMoveResponse(nullptr) {}
  ~PositionMoveResponse() override;
  explicit constexpr PositionMoveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionMoveResponse(const PositionMoveResponse& from);
  PositionMoveResponse(PositionMoveResponse&& from) noexcept
    : PositionMoveResponse() {
    *this = ::std::move(from);
  }

  inline PositionMoveResponse& operator=(const PositionMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionMoveResponse& operator=(PositionMoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionMoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionMoveResponse* internal_default_instance() {
    return reinterpret_cast<const PositionMoveResponse*>(
               &_PositionMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionMoveResponse& a, PositionMoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionMoveResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionMoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionMoveResponse* New() const final {
    return new PositionMoveResponse();
  }

  PositionMoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionMoveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionMoveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionMoveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionMoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.battle.PositionMoveResponse";
  }
  protected:
  explicit PositionMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .wzbgame.model.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::wzbgame::model::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::wzbgame::model::Position* release_position();
  ::wzbgame::model::Position* mutable_position();
  void set_allocated_position(::wzbgame::model::Position* position);
  private:
  const ::wzbgame::model::Position& _internal_position() const;
  ::wzbgame::model::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::wzbgame::model::Position* position);
  ::wzbgame::model::Position* unsafe_arena_release_position();

  // optional int32 Result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.battle.PositionMoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wzbgame::model::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_battle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionMoveRequest

// -------------------------------------------------------------------

// PositionMoveResponse

// optional int32 Result = 1;
inline bool PositionMoveResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionMoveResponse::has_result() const {
  return _internal_has_result();
}
inline void PositionMoveResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionMoveResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionMoveResponse::result() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.battle.PositionMoveResponse.Result)
  return _internal_result();
}
inline void PositionMoveResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void PositionMoveResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.battle.PositionMoveResponse.Result)
}

// optional .wzbgame.model.Position position = 2;
inline bool PositionMoveResponse::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool PositionMoveResponse::has_position() const {
  return _internal_has_position();
}
inline const ::wzbgame::model::Position& PositionMoveResponse::_internal_position() const {
  const ::wzbgame::model::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::wzbgame::model::Position&>(
      ::wzbgame::model::_Position_default_instance_);
}
inline const ::wzbgame::model::Position& PositionMoveResponse::position() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.battle.PositionMoveResponse.position)
  return _internal_position();
}
inline void PositionMoveResponse::unsafe_arena_set_allocated_position(
    ::wzbgame::model::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wzbgame.message.battle.PositionMoveResponse.position)
}
inline ::wzbgame::model::Position* PositionMoveResponse::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::wzbgame::model::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wzbgame::model::Position* PositionMoveResponse::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:wzbgame.message.battle.PositionMoveResponse.position)
  _has_bits_[0] &= ~0x00000001u;
  ::wzbgame::model::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::wzbgame::model::Position* PositionMoveResponse::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::wzbgame::model::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::wzbgame::model::Position* PositionMoveResponse::mutable_position() {
  ::wzbgame::model::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.battle.PositionMoveResponse.position)
  return _msg;
}
inline void PositionMoveResponse::set_allocated_position(::wzbgame::model::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.battle.PositionMoveResponse.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace battle
}  // namespace message
}  // namespace wzbgame

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
