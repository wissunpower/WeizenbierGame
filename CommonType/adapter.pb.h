// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adapter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_adapter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_adapter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_adapter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_adapter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adapter_2eproto;
namespace wzbgame {
namespace message {
class WrappedMessage;
struct WrappedMessageDefaultTypeInternal;
extern WrappedMessageDefaultTypeInternal _WrappedMessage_default_instance_;
}  // namespace message
}  // namespace wzbgame
PROTOBUF_NAMESPACE_OPEN
template<> ::wzbgame::message::WrappedMessage* Arena::CreateMaybeMessage<::wzbgame::message::WrappedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wzbgame {
namespace message {

enum MessageType : int {
  UnknownMessageType = 0,
  ChatRequest = 10,
  ChatResponse = 11,
  ChatNotification = 12,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UnknownMessageType;
constexpr MessageType MessageType_MAX = ChatNotification;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class WrappedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wzbgame.message.WrappedMessage) */ {
 public:
  inline WrappedMessage() : WrappedMessage(nullptr) {}
  ~WrappedMessage() override;
  explicit constexpr WrappedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrappedMessage(const WrappedMessage& from);
  WrappedMessage(WrappedMessage&& from) noexcept
    : WrappedMessage() {
    *this = ::std::move(from);
  }

  inline WrappedMessage& operator=(const WrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedMessage& operator=(WrappedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrappedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrappedMessage* internal_default_instance() {
    return reinterpret_cast<const WrappedMessage*>(
               &_WrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrappedMessage& a, WrappedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrappedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrappedMessage* New() const final {
    return new WrappedMessage();
  }

  WrappedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrappedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrappedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WrappedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrappedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wzbgame.message.WrappedMessage";
  }
  protected:
  explicit WrappedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .google.protobuf.Any message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const PROTOBUF_NAMESPACE_ID::Any& message() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_message();
  PROTOBUF_NAMESPACE_ID::Any* mutable_message();
  void set_allocated_message(PROTOBUF_NAMESPACE_ID::Any* message);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_message() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      PROTOBUF_NAMESPACE_ID::Any* message);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_message();

  // .wzbgame.message.MessageType type = 1;
  void clear_type();
  ::wzbgame::message::MessageType type() const;
  void set_type(::wzbgame::message::MessageType value);
  private:
  ::wzbgame::message::MessageType _internal_type() const;
  void _internal_set_type(::wzbgame::message::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:wzbgame.message.WrappedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  PROTOBUF_NAMESPACE_ID::Any* message_;
  int type_;
  friend struct ::TableStruct_adapter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrappedMessage

// .wzbgame.message.MessageType type = 1;
inline void WrappedMessage::clear_type() {
  type_ = 0;
}
inline ::wzbgame::message::MessageType WrappedMessage::_internal_type() const {
  return static_cast< ::wzbgame::message::MessageType >(type_);
}
inline ::wzbgame::message::MessageType WrappedMessage::type() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.WrappedMessage.type)
  return _internal_type();
}
inline void WrappedMessage::_internal_set_type(::wzbgame::message::MessageType value) {
  
  type_ = value;
}
inline void WrappedMessage::set_type(::wzbgame::message::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wzbgame.message.WrappedMessage.type)
}

// optional .google.protobuf.Any message = 2;
inline bool WrappedMessage::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_ != nullptr);
  return value;
}
inline bool WrappedMessage::has_message() const {
  return _internal_has_message();
}
inline const PROTOBUF_NAMESPACE_ID::Any& WrappedMessage::_internal_message() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& WrappedMessage::message() const {
  // @@protoc_insertion_point(field_get:wzbgame.message.WrappedMessage.message)
  return _internal_message();
}
inline void WrappedMessage::unsafe_arena_set_allocated_message(
    PROTOBUF_NAMESPACE_ID::Any* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wzbgame.message.WrappedMessage.message)
}
inline PROTOBUF_NAMESPACE_ID::Any* WrappedMessage::release_message() {
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* WrappedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:wzbgame.message.WrappedMessage.message)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Any* temp = message_;
  message_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* WrappedMessage::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline PROTOBUF_NAMESPACE_ID::Any* WrappedMessage::mutable_message() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:wzbgame.message.WrappedMessage.message)
  return _msg;
}
inline void WrappedMessage::set_allocated_message(PROTOBUF_NAMESPACE_ID::Any* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:wzbgame.message.WrappedMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace wzbgame

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::wzbgame::message::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wzbgame::message::MessageType>() {
  return ::wzbgame::message::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_adapter_2eproto
