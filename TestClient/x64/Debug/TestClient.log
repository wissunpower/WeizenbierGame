     0>$(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       확장 경로 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild을(를) 사용하여 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.props을(를) 가져옵니다.
       속성 재할당: $(MSBuildProjectExtensionsPath)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Microsoft.Common.props(57,5)의 "D:\GitHub\WeizenbierGame\TestClient\obj\"(이전 값: "obj\")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       확장 경로 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild을(를) 사용하여 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*을(를) 가져옵니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       "Configuration" 속성은 전역 속성이므로 수정할 수 없습니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       "Configuration" 속성은 전역 속성이므로 수정할 수 없습니다.
       속성 재할당: $(PlatformToolset)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Platforms\x64\Platform.Default.props(29,5)의 "v100"(이전 값: "")
       "LangID" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionDir" 속성은 전역 속성이므로 수정할 수 없습니다.
       속성 재할당: $(UseDebugLibraries)=D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj(44,5)의 "true"(이전 값: "false")
       속성 재할당: $(PlatformToolset)=D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj(45,5)의 "v142"(이전 값: "v100")
       속성 재할당: $(CharacterSet)=D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj(46,5)의 "Unicode"(이전 값: "NotSet")
       속성 재할당: $(WindowsSDK_ExecutablePath_x86)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.props(199,5)의 "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86;;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools"(이전 값: "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86;")
       속성 재할당: $(WindowsSDK_ExecutablePath_x64)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.props(200,5)의 "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64;;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64"(이전 값: "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64;")
       속성 재할당: $(TargetExt)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(28,5)의 ".exe"(이전 값: "")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(94,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(95,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(96,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(97,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(98,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;;")
       속성 재할당: $(VC_ExecutablePath_Loc)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(99,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;;;;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\arm\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x64\1042;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86\1042;;;;;;;")
       속성 재할당: $(RemoteDebuggerDeployDebugCppRuntime)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(149,5)의 "true"(이전 값: "false")
       속성 재할당: $(MultiProcMaxCount)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Common.props(207,5)의 "0"(이전 값: "")
       속성 재할당: $(EspXtensions)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CodeAnalysis.Extensions.props(21,5)의 "EnumIndex.dll;CppCoreCheck.dll;"(이전 값: "CppCoreCheck.dll;")
       속성 재할당: $(EspXtensions)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CodeAnalysis.Extensions.props(24,5)의 "HResultCheck.dll;EnumIndex.dll;CppCoreCheck.dll;"(이전 값: "EnumIndex.dll;CppCoreCheck.dll;")
       속성 재할당: $(EspXtensions)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CodeAnalysis.Extensions.props(27,5)의 "VariantClear.dll;HResultCheck.dll;EnumIndex.dll;CppCoreCheck.dll;"(이전 값: "HResultCheck.dll;EnumIndex.dll;CppCoreCheck.dll;")
       속성 재할당: $(EspXtensions)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CodeAnalysis.Extensions.props(32,5)의 "ConcurrencyCheck.dll;VariantClear.dll;HResultCheck.dll;EnumIndex.dll;CppCoreCheck.dll;"(이전 값: "VariantClear.dll;HResultCheck.dll;EnumIndex.dll;CppCoreCheck.dll;")
       속성 재할당: $(MsvcAnalysisToolsPath)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Analysis.props(29,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX64\x86")
       속성 재할당: $(_PropertySheetDisplayName)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.unicodesupport.props(15,5)의 "Unicode Support"(이전 값: "Core Windows Libraries")
       속성 재할당: $(_PropertySheetDisplayName)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Application.props(15,5)의 "Application"(이전 값: "Unicode Support")
       "SolutionExt" 속성은 전역 속성이므로 수정할 수 없습니다.
       속성 재할당: $(ExtensionsToDeleteOnClean)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(38,5)의 "*.cdf;*.cache;*.obj;*.obj.enc;*.ilk;*.ipdb;*.iobj;*.resources;*.tlb;*.tli;*.tlh;*.tmp;*.rsp;*.pgc;*.pgd;*.meta;*.tlog;*.manifest;*.res;*.pch;*.exp;*.idb;*.rep;*.xdc;*.pdb;*_manifest.rc;*.bsc;*.sbr;*.xml;*.metagen;*.bi;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe.manifest;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.tlb;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.pdb;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.bsc;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.ilk;D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe.intermediate.manifest;"(이전 값: "*.cdf;*.cache;*.obj;*.obj.enc;*.ilk;*.ipdb;*.iobj;*.resources;*.tlb;*.tli;*.tlh;*.tmp;*.rsp;*.pgc;*.pgd;*.meta;*.tlog;*.manifest;*.res;*.pch;*.exp;*.idb;*.rep;*.xdc;*.pdb;*_manifest.rc;*.bsc;*.sbr;*.xml;*.metagen;*.bi")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       "Configuration" 속성은 전역 속성이므로 수정할 수 없습니다.
       속성 재할당: $(_DocumentationFileProduced)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(185,5)의 "false"(이전 값: "true")
       "DevEnvDir" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionName" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionFileName" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionPath" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionDir" 속성은 전역 속성이므로 수정할 수 없습니다.
       "SolutionExt" 속성은 전역 속성이므로 수정할 수 없습니다.
       속성 재할당: $(AutoUnifyAssemblyReferences)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(368,5)의 "false"(이전 값: "true")
       속성 재할당: $(ProcessorArchitecture)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(505,5)의 "amd64"(이전 값: "x64")
       속성 재할당: $(DelaySign)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(557,5)의 ""(이전 값: "false")
       속성 재할당: $(_SGenGenerateSerializationAssembliesConfig)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(3611,5)의 "Auto"(이전 값: "")
       속성 재할당: $(_SGenGenerateSerializationAssembliesConfig)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets(3612,5)의 "Off"(이전 값: "Auto")
       속성 재할당: $(_CodeAnalysisTreatWarningsAsErrors)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets(125,5)의 "false"(이전 값: "")
       속성 재할당: $(CAExcludePath)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets(235,5)의 "C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;"(이전 값: "C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;")
       속성 재할당: $(CAExcludePath)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets(236,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;"(이전 값: "C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;")
       속성 재할당: $(CAExcludePath)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets(237,5)의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;"(이전 값: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;")
       속성 재할당: $(PrepareForBuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets(240,5)의 ";GetFrameworkPaths;GetReferenceAssemblyPaths;AssignLinkMetadata;SetCABuildNativeEnvironmentVariables"(이전 값: ";GetFrameworkPaths;GetReferenceAssemblyPaths;AssignLinkMetadata")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       속성 재할당: $(ResolveReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets(75,5)의 "
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           "(이전 값: "
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ")
       속성 재할당: $(PrepareResourceNamesDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets(97,7)의 "
                           AssignWinFXEmbeddedResource;
                           
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           
             "(이전 값: "
             AssignTargetPaths;
             SplitResourcesByCulture;
             CreateManifestResourceNames;
             CreateCustomManifestResourceNames
           ")
       속성 재할당: $(PrepareResourcesDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets(108,7)의 "
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             "(이전 값: "
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           ")
       속성 재할당: $(CompileDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets(184,5)의 "
               
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ;
               _AfterCompileWinFXInternal
           "(이전 값: "
             ResolveReferences;
             ResolveKeySource;
             SetWin32ManifestProperties;
             FindReferenceAssembliesForReferences;
             _GenerateCompileInputs;
             BeforeCompile;
             _TimeStampBeforeCompile;
             _GenerateCompileDependencyCache;
             CoreCompile;
             _TimeStampAfterCompile;
             AfterCompile;
           ")
       속성 재할당: $(PublishBuildDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets(813,9)의 "
                   BuildOnlySettings;
                   PrepareForBuild;
                   ResolveReferences;
                   PrepareResources;
                   ResolveKeySource;
                   PrepareResourcesForSatelliteAssemblies;
                   GenerateSerializationAssemblies;
                   CreateSatelliteAssemblies;
               "(이전 값: "
             BuildOnlySettings;
             PrepareForBuild;
             ResolveReferences;
             PrepareResources;
             ResolveKeySource;
             GenerateSerializationAssemblies;
             CreateSatelliteAssemblies;
           ")
       속성 재할당: $(BuildDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets(35,5)의 "
             EntityDeploy;
             
             BeforeBuild;
             CoreBuild;
             AfterBuild
           
           "(이전 값: "
             BeforeBuild;
             CoreBuild;
             AfterBuild
           ")
       속성 재할당: $(CleanDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Data.Entity.targets(42,5)의 "
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           "(이전 값: "
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       속성 재할당: $(PrepareResourcesDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(35,5)의 "
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           "(이전 값: "
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
             ")
       속성 재할당: $(CoreCompileDependsOn)=C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets(76,5)의 "
               DesignTimeXamlMarkupCompilation;
               
                 DesignTimeMarkupCompilation;
                 
             
           "(이전 값: "
                 DesignTimeMarkupCompilation;
                 
             ")
       속성 재할당: $(ResolveReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\TeamTest\Microsoft.TeamTest.targets(4,5)의 "
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           "(이전 값: "
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       확장 경로 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild을(를) 사용하여 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*을(를) 가져옵니다.
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       확장 경로 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild을(를) 사용하여 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\build\Microsoft.Docker.targets을(를) 가져옵니다.
       속성 재할당: $(ProjectLockFile)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\NuGet\16.0\Microsoft.NuGet.targets(74,5)의 "obj\project.assets.json"(이전 값: "D:\GitHub\WeizenbierGame\TestClient\obj\project.assets.json")
       속성 재할당: $(ResolveAssemblyReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\NuGet\16.0\Microsoft.NuGet.targets(185,5)의 "
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets"(이전 값: "
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ")
       속성 재할당: $(PrepareResourcesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\NuGet\16.0\Microsoft.NuGet.targets(186,5)의 "ResolveNuGetPackageAssets;
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           "(이전 값: "
             XamlMarkupCompilePass1;
             XamlMarkupCompilePass2;
             
                       MarkupCompilePass1;
                       AfterMarkupCompilePass1;
                       MarkupCompilePass2ForMainAssembly;
                       FileClassification;
                       MainResourcesGeneration;
                       
             ;
             PrepareResourceNames;
             ResGen;
             CompileLicxFiles
           
              
           ")
       속성 재할당: $(_HandlePackageFileConflictsAfter)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\NuGet\16.0\Microsoft.NuGet.targets(267,5)의 "ResolveNuGetPackageAssets;ResolveNuGetPackageAssetsNonAOT"(이전 값: "ResolveNuGetPackageAssets")
       $(MSBuildExtensionsPath)에 사용 중인 검색 경로는 C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild;$(MSBuildProgramFiles32)\MSBuild입니다.
       속성 재할당: $(DebugType)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets(37,5)의 ""(이전 값: "none")
       속성 재할당: $(BuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets(119,5)의 "
             _PrepareForBuild;
             
             ResolveReferences;
             PrepareForBuild;
             InitializeBuildStatus;
             BuildGenerateSources;
             BuildCompile;
             BuildLink;
           ;
             AfterBuild;
             IncrementalClean;
             FinalizeBuildStatus;
           "(이전 값: "
             EntityDeploy;
             
             BeforeBuild;
             CoreBuild;
             AfterBuild
           
           ")
       속성 재할당: $(RebuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets(127,5)의 "
             _PrepareForRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ;
           "(이전 값: "
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ")
       속성 재할당: $(CleanDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets(132,5)의 "
             _PrepareForClean;
             
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ;
           "(이전 값: "
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ")
       속성 재할당: $(BeforeBuildGenerateSourcesTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(61,5)의 "
             
             ;
             BeforeBuildGenerateSources;
           ;
           "(이전 값: "
             ;
             BeforeBuildGenerateSources;
           ")
       속성 재할당: $(AfterBuildGenerateSourcesTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(72,5)의 "
             
             ;
             AfterBuildGenerateSources;
           ;
             AfterBuildGenerateSourcesEvent;
           "(이전 값: "
             ;
             AfterBuildGenerateSources;
           ")
       속성 재할당: $(BuildGenerateSourcesAction)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(142,5)의 "_BuildGenerateSourcesAction"(이전 값: "Build")
       속성 재할당: $(BuildCompileAction)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(143,5)의 "_BuildCompileAction"(이전 값: "Build")
       속성 재할당: $(BuildLinkAction)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(144,5)의 "_BuildLinkAction"(이전 값: "Build")
       속성 재할당: $(GetReferenceAssemblyPathsDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(149,5)의 "_PrepareForReferenceResolution;
               ;
               GetWinFXPath
           "(이전 값: "
               ;
               GetWinFXPath
           ")
       속성 재할당: $(DetermineProjectTypeTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(251,5)의 "_PrepareForReferenceResolution;
             ;
             AddExternalIncludDirectoriesToPaths
           "(이전 값: "
             ;
             AddExternalIncludDirectoriesToPaths
           ")
       속성 재할당: $(ResolveReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(311,5)의 "_PrepareForReferenceResolution;ComputeCrtSDKReference;
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           "(이전 값: "
             
             
             BeforeResolveReferences;
             AssignProjectConfiguration;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             ResolveNativeReferences;
             ResolveAssemblyReferences;
             GenerateBindingRedirects;
             ResolveComReferences;
             AfterResolveReferences
           ;
             ImplicitlyExpandDesignTimeFacades
           ;
             ResolveTestReferences
           ")
       속성 재할당: $(ResolveAssemblyReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(312,5)의 "_PrepareForReferenceResolution;
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets"(이전 값: "
             ResolveProjectReferences;
             FindInvalidProjectReferences;
             GetFrameworkPaths;
             GetReferenceAssemblyPaths;
             PrepareForBuild;
             ResolveSDKReferences;
             ExpandSDKReferences;
           ;ResolveNuGetPackageAssets")
       속성 재할당: $(ResolveSDKReferencesDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(313,5)의 "_PrepareForReferenceResolution;ComputeCrtSDKReference;
             GetInstalledSDKLocations
           "(이전 값: "
             GetInstalledSDKLocations
           ")
       속성 재할당: $(ComputeCompileInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(612,5)의 "
             
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ;
             ComputeMIDLGeneratedCompileInputs;
           "(이전 값: "
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ")
       속성 재할당: $(ComputeLinkInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(925,5)의 "
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           "(이전 값: "
             ;
             ComputeRCGeneratedLinkInputs;
           ")
       속성 재할당: $(GetTargetPathDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1095,5)의 "_PrepareForReferenceResolution;GetResolvedWinMD;"(이전 값: "")
       속성 재할당: $(ComputeCompileInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1121,5)의 "
             
             
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ;
             ComputeMIDLGeneratedCompileInputs;
           ;
             ComputeCLInputPDBName;
             ComputeReferenceCLInput;
             WarnCompileDuplicatedFilename
           "(이전 값: "
             
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ;
             ComputeMIDLGeneratedCompileInputs;
           ")
       속성 재할당: $(ComputeLinkInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1173,5)의 "
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           "(이전 값: "
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ")
       속성 재할당: $(ComputeLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1180,5)의 "
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           "(이전 값: "
             ;
             ComputeRCGeneratedLibInputs;
           ")
       속성 재할당: $(ComputeImpLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1187,5)의 "
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ;
             ComputeCustomBuildOutput;
           "(이전 값: "
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ")
       속성 재할당: $(ComputeLinkInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1247,5)의 "
             
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLinkInputs;
           "(이전 값: "
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ")
       속성 재할당: $(ComputeLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1262,5)의 "
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           "(이전 값: "
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ")
       속성 재할당: $(ComputeImpLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1277,5)의 "
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedImpLibInputs;
           "(이전 값: "
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ;
             ComputeCustomBuildOutput;
           ")
       속성 재할당: $(ComputeLinkInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1308,5)의 "
             
             
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLinkInputs;
           ;
             ComputeLinkInputsFromProject;
           "(이전 값: "
             
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLinkInputs;
           ")
       속성 재할당: $(ComputeLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1326,5)의 "
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ;
             ComputeLibInputsFromProject;
           "(이전 값: "
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ")
       속성 재할당: $(ComputeImpLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1344,5)의 "
             
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedImpLibInputs;
           ;
             ComputeImpLibInputsFromProject;
           "(이전 값: "
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeRCGeneratedImpLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedImpLibInputs;
           ")
       속성 재할당: $(ComputeLinkInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1488,5)의 "
             
             
             
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLinkInputs;
           ;
             ComputeLinkInputsFromProject;
           ;
             ComputeReferenceLinkInputs;
           "(이전 값: "
             
             
             
             
             ;
             ComputeRCGeneratedLinkInputs;
           ;
             ComputeManifestGeneratedLinkerInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLinkInputs;
           ;
             ComputeLinkInputsFromProject;
           ")
       속성 재할당: $(ComputeLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1526,5)의 "
             
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ;
             ComputeLibInputsFromProject;
           ;
             ComputeReferenceLibInputs;
           "(이전 값: "
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ;
             ComputeLibInputsFromProject;
           ")
       속성 재할당: $(ComputeLibInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1583,5)의 "
             ComputeLibAdditionalOptions;
             
             
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ;
             ComputeLibInputsFromProject;
           ;
             ComputeReferenceLibInputs;
           
           "(이전 값: "
             
             
             
             
             ;
             ComputeRCGeneratedLibInputs;
           ;
             ComputeCustomBuildOutput;
           ;
             ComputeCLGeneratedLibInputs;
           ;
             ComputeLibInputsFromProject;
           ;
             ComputeReferenceLibInputs;
           ")
       속성 재할당: $(GetProjectInfoForReferenceDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(1770,5)의 "
             
             ;
             AddPublicIncludeDirectoriesToProjectsInfoForReference;
           ;
             AddPublicBMIsToProjectsInfoForReference;
             AddDeployRecipeFileToProjectsInfoForReference;
             AddLibrariesToProjectsInfoForReference;
           "(이전 값: "
             ;
             AddPublicIncludeDirectoriesToProjectsInfoForReference;
           ")
       속성 재할당: $(DocumentationProjectOutputGroupDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(2157,5)의 "ResolvedXDCMake;ComputeCLCompileGeneratedXDCFiles"(이전 값: "")
       속성 재할당: $(ContentFilesProjectOutputGroupDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets(2223,5)의 "PrepareForBuild;AssignTargetPaths;PrepareForBuild;AssignTargetPaths;MakeDirsForFxc"(이전 값: "PrepareForBuild;AssignTargetPaths")
       속성 재할당: $(ComputeCompileInputsTargets)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(302,5)의 "
             
             
             
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ;
             ComputeMIDLGeneratedCompileInputs;
           ;
             ComputeCLInputPDBName;
             ComputeReferenceCLInput;
             WarnCompileDuplicatedFilename
           ;
             ;
             FixupCLCompileOptions;
           "(이전 값: "
             
             
             ;
             GenerateTargetFrameworkMonikerAttribute;
           ;
             ComputeMIDLGeneratedCompileInputs;
           ;
             ComputeCLInputPDBName;
             ComputeReferenceCLInput;
             WarnCompileDuplicatedFilename
           ")
       속성 재할당: $(BuildingProject)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(1989,5)의 "true"(이전 값: "false")
       속성 재할당: $(ContentFilesProjectOutputGroupDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(2516,5)의 "PrepareForBuild;AssignTargetPaths;PrepareForBuild;AssignTargetPaths;MakeDirsForFxc;_CreateCopyFileItems;"(이전 값: "PrepareForBuild;AssignTargetPaths;PrepareForBuild;AssignTargetPaths;MakeDirsForFxc")
       속성 재할당: $(VcpkgRoot)=C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets(18,5)의 "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\"(이전 값: "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..")
       속성 재할당: $(VcpkgInstalledDir)=C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets(23,5)의 "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\"(이전 값: "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed")
       속성 재할당: $(_ZVcpkgCurrentInstalledDir)=C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets(26,5)의 "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\"(이전 값: "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows")
       속성 재할당: $(PrepareForBuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.targets(16,5)의 "_CheckWindowsSDKInstalled;;GetFrameworkPaths;GetReferenceAssemblyPaths;AssignLinkMetadata;SetCABuildNativeEnvironmentVariables"(이전 값: ";GetFrameworkPaths;GetReferenceAssemblyPaths;AssignLinkMetadata;SetCABuildNativeEnvironmentVariables")
       속성 재할당: $(CleanDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets(22,5)의 "
             
             _PrepareForClean;
             
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ;
           ;
             CppClean
           "(이전 값: "
             _PrepareForClean;
             
             
             BeforeClean;
             UnmanagedUnregistration;
             CoreClean;
             CleanReferencedProjects;
             CleanPublishFolder;
             AfterClean
           ;
             EntityClean;
           ;
           ")
       속성 재할당: $(CppCleanDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets(92,5)의 "
             BeforeCppClean;
             ;
             CoreCppClean;
             AfterCppClean;
           ;PGInstrumentedClean"(이전 값: "
             BeforeCppClean;
             ;
             CoreCppClean;
             AfterCppClean;
           ")
       속성 재할당: $(BuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.DesignTime.targets(540,5)의 "SetTelemetryEnvironmentVariables;
             _PrepareForBuild;
             
             ResolveReferences;
             PrepareForBuild;
             InitializeBuildStatus;
             BuildGenerateSources;
             BuildCompile;
             BuildLink;
           ;
             AfterBuild;
             IncrementalClean;
             FinalizeBuildStatus;
           "(이전 값: "
             _PrepareForBuild;
             
             ResolveReferences;
             PrepareForBuild;
             InitializeBuildStatus;
             BuildGenerateSources;
             BuildCompile;
             BuildLink;
           ;
             AfterBuild;
             IncrementalClean;
             FinalizeBuildStatus;
           ")
       속성 재할당: $(RebuildDependsOn)=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.DesignTime.targets(541,5)의 "SetTelemetryEnvironmentVariables;
             _PrepareForRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ;
           "(이전 값: "
             _PrepareForRebuild;
             
             BeforeRebuild;
             Clean;
             Build;
             AfterRebuild;
           ;
           ")
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GetFrameworkPaths" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets" 프로젝트의 "GetFrameworkPaths" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "SatelliteDllsProjectOutputGroup" 대상을 "C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" 프로젝트의 "SatelliteDllsProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GenerateTargetFrameworkMonikerAttribute" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 프로젝트의 "GenerateTargetFrameworkMonikerAttribute" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "Build" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 프로젝트의 "Build" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "Rebuild" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 프로젝트의 "Rebuild" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "AfterBuild" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 프로젝트의 "AfterBuild" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "PrepareForBuild" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "PrepareForBuild" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GetTargetPath" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "GetTargetPath" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "ComputeIntermediateSatelliteAssemblies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ComputeIntermediateSatelliteAssemblies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ClCompile" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ClCompile" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ResourceCompile" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ResourceCompile" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Lib" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Lib" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Link" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Link" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "AllProjectOutputGroups" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "AllProjectOutputGroups" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "BuiltProjectOutputGroup" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "BuiltProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "DebugSymbolsProjectOutputGroup" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "DebugSymbolsProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "DocumentationProjectOutputGroup" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "DocumentationProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "SourceFilesProjectOutputGroup" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "SourceFilesProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "ContentFilesProjectOutputGroup" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ContentFilesProjectOutputGroup" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "AllProjectOutputGroupsDependencies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "AllProjectOutputGroupsDependencies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "BuiltProjectOutputGroupDependencies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "BuiltProjectOutputGroupDependencies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "DebugSymbolsProjectOutputGroupDependencies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "DebugSymbolsProjectOutputGroupDependencies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "DocumentationProjectOutputGroupDependencies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "DocumentationProjectOutputGroupDependencies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "PreBuildEvent" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "PreBuildEvent" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "PostBuildEvent" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "PostBuildEvent" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ClCompile" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "ClCompile" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Link" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "Link" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Lib" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "Lib" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ImpLib" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "ImpLib" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Midl" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "Midl" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "ResourceCompile" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "ResourceCompile" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "BeforeResGen" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "BeforeResGen" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "ResGen" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "ResGen" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GenerateSatelliteAssemblies" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "GenerateSatelliteAssemblies" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "Manifest" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "Manifest" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "XdcMake" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "XdcMake" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 프로젝트의 "BscMake" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "BscMake" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.MetaGen.targets" 프로젝트의 "ComputeMetaGenInputs" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "ComputeMetaGenInputs" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GetNativeManifest" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 프로젝트의 "GetNativeManifest" 대상으로 재정의하고 있습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 프로젝트의 "GetTargetPathWithTargetPlatformMoniker" 대상을 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.DesignTime.targets" 프로젝트의 "GetTargetPathWithTargetPlatformMoniker" 대상으로 재정의하고 있습니다.
       "C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets(117,82)"의 BeforeTargets 특성에 나열된 "CopyLocalFilesOutputGroup" 대상이 프로젝트에 없으며 무시됩니다.
빌드 시작: 2021-07-28 오전 2:34:20
로깅의 세부 정보 표시가 Detailed(으)로 설정되었습니다.     1>3 노드의 "D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트(Rebuild 대상)입니다.
     1>도구 버전 "Current"(을)를 사용하여 빌드하고 있습니다.
       조건이 잘못되어 "EnableIntermediateOutputPathMismatchWarning" 대상을 건너뜁니다. ('$(RestoreProjectStyle)' == 'PackageReference')이(가) ('' == 'PackageReference')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_CheckForInvalidConfigurationAndPlatform" 대상("SetTelemetryEnvironmentVariables" 대상이 종속됨):
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ( '$(_InvalidConfigurationError)' == 'true' )이(가) ( '' == 'true' )(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ( '$(_InvalidConfigurationWarning)' == 'true' )이(가) ( '' == 'true' )(으)로 확인되었습니다.
       "Message" 작업
         Configuration=Debug
       "Message" 작업을 실행했습니다.
       "Message" 작업
         Platform=x64
       "Message" 작업을 실행했습니다.
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)'))이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\' != '' and !HasTrailingSlash('D:\GitHub\WeizenbierGame\x64\Debug\'))(으)로 확인되었습니다.
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)'))이(가) ('x64\Debug\' != '' and !HasTrailingSlash('x64\Debug\'))(으)로 확인되었습니다.
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)'))이(가) ('obj\' != '' and !HasTrailingSlash('obj\'))(으)로 확인되었습니다.
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ( '$(_InitialMSBuildProjectExtensionsPath)' != '' And '$(MSBuildProjectExtensionsPath)' != '$(_InitialMSBuildProjectExtensionsPath)' )이(가) ( 'D:\GitHub\WeizenbierGame\TestClient\obj\' != '' And 'D:\GitHub\WeizenbierGame\TestClient\obj\' != 'D:\GitHub\WeizenbierGame\TestClient\obj\' )(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ( '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' )이(가) ( '' == 'true' And 'obj\' != 'obj\' And 'obj\' != 'D:\GitHub\WeizenbierGame\TestClient\obj\' )(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_CheckForInvalidConfigurationAndPlatform" 대상을 빌드했습니다.
       "_CheckForInvalidConfigurationAndPlatform" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.DesignTime.targets" 파일에 있는 "SetTelemetryEnvironmentVariables" 대상("Rebuild" 대상이 종속됨):
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "SetEnv" 작업을 사용합니다.
       "SetEnv" 작업
         VSTEL_SolutionSessionID={CE6BE3B4-8944-4CC4-A3E4-15EF643FFFDF}
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         VSTEL_CurrentSolutionBuildID=3909618410
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         VSTEL_ProjectID={9f87ba88-2617-495f-8987-5fa44eb088f9}
       "SetEnv" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "SetTelemetryEnvironmentVariables" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "_PrepareForRebuild" 대상("Rebuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_PrepareForRebuild" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BeforeRebuild" 대상("Rebuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeRebuild" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "_PrepareForClean" 대상("Clean" 대상이 종속됨):
       "Delete" 작업
         "x64\Debug\TestClient.tlog\TestClient.lastbuildstate" 파일을 삭제하고 있습니다.
       "Delete" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_PrepareForClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BeforeClean" 대상("Clean" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeClean" 대상을 빌드했습니다.
       조건이 잘못되어 "UnmanagedUnregistration" 대상을 건너뜁니다. ((('$(_AssemblyTimestampBeforeCompile)' != '$(_AssemblyTimestampAfterCompile)' or '$(RegisterForComInterop)' != 'true' or '$(OutputType)' != 'library') or
                           ('$(_AssemblyTimestampBeforeCompile)' == '')) and
                          Exists('@(_UnmanagedRegistrationCache)'))이(가) ((('' != '' or '' != 'true' or 'exe' != 'library') or
                           ('' == '')) and
                          Exists('obj\TestClient.vcxproj.UnmanagedRegistration.cache'))(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CoreClean" 대상("Clean" 대상이 종속됨):
       "Delete" 작업
         "x64\Debug\\TempCA\TestClient.pdb" 파일이 없습니다. 건너뜁니다.
         "x64\Debug\\TempCA\TestClient.exe" 파일이 없습니다. 건너뜁니다.
       "Delete" 작업을 실행했습니다.
       "ReadLinesFromFile" 작업
       "ReadLinesFromFile" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "D:\GitHub\WeizenbierGame\x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "Delete" 작업
       "Delete" 작업을 실행했습니다.
       "RemoveDuplicates" 작업
       "RemoveDuplicates" 작업을 실행했습니다.
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
       "WriteLinesToFile" 작업
       "WriteLinesToFile" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CoreClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "AssignProjectConfiguration" 대상("PrepareProjectReferences" 대상이 종속됨):
       "AssignProjectConfiguration" 작업
       "AssignProjectConfiguration" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "AssignProjectConfiguration" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_SplitProjectReferencesByFileExistence" 대상("PrepareProjectReferences" 대상이 종속됨):
       조건이 잘못되어 "ResolveNonMSBuildProjectOutput" 작업을 건너뜁니다. ('$(BuildingInsideVisualStudio)'=='true' and '@(ProjectReferenceWithConfiguration)'!='')이(가) ('true'=='true' and ''!='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_SplitProjectReferencesByFileExistence" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_AddOutputPathToGlobalPropertiesToRemove" 대상("_GetProjectReferenceTargetFrameworkProperties" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_AddOutputPathToGlobalPropertiesToRemove" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_GetProjectReferenceTargetFrameworkProperties" 대상("PrepareProjectReferences" 대상이 종속됨):
       "MSBuild" 작업
       "MSBuild" 작업을 실행했습니다.
       조건이 잘못되어 "GetReferenceNearestTargetFrameworkTask" 작업을 건너뜁니다. ('@(_ProjectReferenceTargetFrameworkPossibilities->Count())' != '0' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true')이(가) ('0' != '0' and '.NETFramework,Version=v4.0' != ''
                                                               And 'true' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "GetReferenceNearestTargetFrameworkTask" 작업을 건너뜁니다. ('@(_ProjectReferenceTargetFrameworkPossibilities->Count())' != '0' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
                                                               And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true')이(가) ('0' != '0' and '.NETFramework,Version=v4.0' != ''
                                                               And 'true' != 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_GetProjectReferenceTargetFrameworkProperties" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "PrepareProjectReferences" 대상("CleanReferencedProjects" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "PrepareProjectReferences" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CleanReferencedProjects" 대상("Clean" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')이(가) ('true' != 'true' and 'true' == 'true' and '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CleanReferencedProjects" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CleanPublishFolder" 대상("Clean" 대상이 종속됨):
       조건이 잘못되어 "RemoveDir" 작업을 건너뜁니다. ('$(PublishDir)'=='$(OutputPath)app.publish\' and Exists('$(PublishDir)'))이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\app.publish\'=='D:\GitHub\WeizenbierGame\x64\Debug\app.publish\' and Exists('D:\GitHub\WeizenbierGame\x64\Debug\app.publish\'))(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CleanPublishFolder" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "AfterClean" 대상("Clean" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterClean" 대상을 빌드했습니다.
       조건이 잘못되어 "EntityClean" 대상을 건너뜁니다. ('@(EntityDeploy)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets" 파일에 있는 "BeforeCppClean" 대상("CppClean" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeCppClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets" 파일에 있는 "CoreCppClean" 대상("CppClean" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "CppClean" 작업을 사용합니다.
       "CppClean" 작업
       "CppClean" 작업을 실행했습니다.
       "WriteLinesToFile" 작업
       "WriteLinesToFile" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CoreCppClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets" 파일에 있는 "AfterCppClean" 대상("CppClean" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterCppClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets" 파일에 있는 "PGInstrumentedClean" 대상("CppClean" 대상이 종속됨):
       "Delete" 작업
       "Delete" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "PGInstrumentedClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppClean.targets" 파일에 있는 "CppClean" 대상("Clean" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "CppClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "Clean" 대상("Rebuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "Clean" 대상을 빌드했습니다.
       "SetTelemetryEnvironmentVariables" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "_PrepareForBuild" 대상("Build" 대상이 종속됨):
       조건이 잘못되어 "CreateItem" 작업을 건너뜁니다. ('%(CustomBuild.IncludeFileToTool)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_PrepareForBuild" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_PrepareForReferenceResolution" 대상("ResolveReferences" 대상이 종속됨):
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(_REFERENCE_DEBUG)'=='true')이(가) (''=='true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_PrepareForReferenceResolution" 대상을 빌드했습니다.
       조건이 잘못되어 "ComputeCrtSDKReference" 대상을 건너뜁니다. ('@(ClCompile)'!='' and '$(WindowsAppContainer)'=='true' and '$(UseCrtSDKReference)' != 'false')이(가) ('TestClient.cpp'!='' and 'false'=='true' and '' != 'false')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BeforeResolveReferences" 대상("ResolveReferences" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeResolveReferences" 대상을 빌드했습니다.
       "AssignProjectConfiguration" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "PrepareProjectReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "_RemoveNameMetadataFromProjectReferenceItems" 대상을 건너뜁니다. ('@(ProjectReference)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "ResolveProjectReferences" 대상("ResolveReferences" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildProjectReferences)' != 'true') and '$(VisualStudioVersion)' != '10.0' and '@(_MSBuildProjectReferenceExistent)' != '')이(가) ('' == 'true' and '' != '' and ('true' == 'true' or 'true' != 'true') and '16.0' != '10.0' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')이(가) ('' == 'true' and '' != '' and 'true' != 'true' and 'true' == 'true' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingProject)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != '')이(가) ('' == 'true' and '' != '' and 'true' == 'true' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceNonexistent)' != '')이(가) ('' != '' and '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ResolveProjectReferences" 대상을 빌드했습니다.
       조건이 잘못되어 "FindInvalidProjectReferences" 대상을 건너뜁니다. ('$(FindInvalidProjectReferences)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "ResolveNativeReferences" 대상을 건너뜁니다. ('@(NativeReference)'!='')이(가) (''!='')(으)로 확인되었습니다.
       "_PrepareForReferenceResolution" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveProjectReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "FindInvalidProjectReferences" 대상을 건너뜁니다. ('$(FindInvalidProjectReferences)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.NETFramework.CurrentVersion.targets" 파일에 있는 "GetFrameworkPaths" 대상("ResolveAssemblyReferences" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "GetFrameworkPaths" 대상을 빌드했습니다.
       "_PrepareForReferenceResolution" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "GetWinFXPath" 대상을 건너뜁니다. (('@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(Resource)' != '') and ('$(GetWinFXNativePath)' != '' or '$(GetWinFXWoWPath)' != '' ))이(가) (('' != '' or '' != '' or '' != '') and ('' != '' or '' != '' ))(으)로 확인되었습니다.
       "GetFrameworkPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "GetReferenceAssemblyPaths" 대상("ResolveAssemblyReferences" 대상이 종속됨):
       조건이 잘못되어 "GetReferenceAssemblyPaths" 작업을 건너뜁니다. ('$(TargetFrameworkMoniker)' != '' and ('$(_TargetFrameworkDirectories)' == '' or '$(_FullFrameworkReferenceAssemblyPaths)' == ''))이(가) ('' != '' and ('C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0' == '' or 'C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0' == ''))(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "GetReferenceAssemblyPaths" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Current.targets" 파일에 있는 "AddExternalIncludDirectoriesToPaths" 대상("SetBuildDefaultEnvironmentVariables" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AddExternalIncludDirectoriesToPaths" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.Current.targets" 파일에 있는 "SetBuildDefaultEnvironmentVariables" 대상("PrepareForBuild" 대상이 종속됨):
       "SetEnv" 작업
         PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x86;C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x86;;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\tools;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\ide;C:\Program Files (x86)\HTML Help Workshop;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin;C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\;;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\CMake\bin;C:\src\vcpkg;C:\src\vcpkg\installed\x64-windows\tools\protobuf;C:\Users\wissunpower\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Bandizip\;C:\Users\wissunpower\AppData\Local\GitHubDesktop\bin;C:\Users\wissunpower\AppData\Local\Microsoft\WindowsApps;C:\Users\wissunpower\.dotnet\tools;C:\openssl-1.1.1i\;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\bin\Hostx86\x86;;
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         LIB=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\lib\x64;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\VS\lib\x64;;C:\Program Files (x86)\Windows Kits\10\lib\10.0.18362.0\ucrt\x64;;;C:\Program Files (x86)\Windows Kits\10\lib\10.0.18362.0\um\x64;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\lib\um\x64;
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         LIBPATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\lib\x64;
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         INCLUDE=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\VS\include;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;
       "SetEnv" 작업을 실행했습니다.
       "SetEnv" 작업
         EXTERNAL_INCLUDE=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include;;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\VS\include;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;
       "SetEnv" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "SetBuildDefaultEnvironmentVariables" 대상을 빌드했습니다.
       조건이 잘못되어 "SetUserMacroEnvironmentVariables" 대상을 건너뜁니다. ('@(BuildMacro)' != '' and '$(DesignTimeBuild)' != 'true')이(가) ('' != '' and '' != 'true')(으)로 확인되었습니다.
       "_PrepareForReferenceResolution" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "GetResolvedWinMD" 대상("PrepareForBuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "GetResolvedWinMD" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Cpp.WindowsSDK.targets" 파일에 있는 "_CheckWindowsSDKInstalled" 대상("PrepareForBuild" 대상이 종속됨):
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(WindowsSDKInstalled)' != 'true')이(가) ('true' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(WindowsAppContainer)' != 'true' and '$(WindowsSDK_Desktop_Support)' != true)이(가) ('false' != 'true' and 'true' != true)(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_CheckWindowsSDKInstalled" 대상을 빌드했습니다.
       "GetFrameworkPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "GetReferenceAssemblyPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "AssignLinkMetadata" 대상을 건너뜁니다. ( '$(SynthesizeLinkMetadata)' == 'true' )이(가) ( '' == 'true' )(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VisualStudio\v16.0\CodeAnalysis\Microsoft.CodeAnalysis.targets" 파일에 있는 "SetCABuildNativeEnvironmentVariables" 대상("PrepareForBuild" 대상이 종속됨):
       "SetEnv" 작업
         CAExcludePath=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt;;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\shared;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\winrt;C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\Include\um;
       "SetEnv" 작업을 실행했습니다.
       조건이 잘못되어 "SetEnv" 작업을 건너뜁니다. ('$(RunMsvcAnalysis)'=='true' and '$(VCCodeAnalysisUX)'=='true')이(가) ('false'=='true' and 'true'=='true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "SetCABuildNativeEnvironmentVariables" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "PrepareForBuild" 대상("ResolveAssemblyReferences" 대상이 종속됨):
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)' != 'true' and '$(ConfigurationPlatformExists)' != 'true')이(가) ('' != 'true' and 'true' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)' != 'true' and '$(_ToolsetFound)' != 'true')이(가) ('' != 'true' and 'true' != 'true')(으)로 확인되었습니다.
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(WindowsAppContainer)'=='true' and '$(ConfigurationType)'!='Application' and '$(ConfigurationType)'!='DynamicLibrary' and '$(ConfigurationType)'!='StaticLibrary')이(가) (''!='true' and 'false'=='true' and 'Application'!='Application' and 'Application'!='DynamicLibrary' and 'Application'!='StaticLibrary')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(VCToolsInstallDir)'=='' and '$(UseEnv)' != 'true' and ('$(TargetFrameworkVersion)'=='v3.5' or '$(TargetFrameworkVersion)'=='v3.0' or '$(TargetFrameworkVersion)'=='v2.0' ))이(가) (''!='true' and 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\'=='' and '' != 'true' and ('v4.0'=='v3.5' or 'v4.0'=='v3.0' or 'v4.0'=='v2.0' ))(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(VCToolsInstallDir)'=='' and '$(UseEnv)' != 'true' and '$(PlatformToolset)'=='v90')이(가) (''!='true' and 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\'=='' and '' != 'true' and 'v142'=='v90')(으)로 확인되었습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "CheckVCToolsetVersion" 작업을 사용합니다.
       "CheckVCToolsetVersion" 작업
       "CheckVCToolsetVersion" 작업을 실행했습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(CheckMFCInstalled)' == 'true' and !Exists($(MFC_KeyFile)) and '$(SpectreLibs)' == '')이(가) ('' == 'true' and !Exists(C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64\mfcs140.lib) and '' == '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(CheckMFCInstalled)' == 'true' and !Exists($(MFC_KeyFile)) and '$(SpectreLibs)' != '')이(가) ('' == 'true' and !Exists(C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64\mfcs140.lib) and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(CheckATLInstalled)' == 'true' and !Exists($(ATL_KeyFile)) and '$(SpectreLibs)' == '')이(가) ('' == 'true' and !Exists(C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64\atls.lib) and '' == '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(CheckATLInstalled)' == 'true' and !Exists($(ATL_KeyFile)) and '$(SpectreLibs)' != '')이(가) ('' == 'true' and !Exists(C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\lib\x64\atls.lib) and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)' != 'true' and
                                                               '$(CheckMSVCComponents)'=='true' and
                                                               '$(SpectreMitigation)' != '' and
                                                               '$(SpectreMitigation)' != 'false' and
                                                               (('$(_VC_Target_Library_Platform)' == 'OneCore' and !Exists('$(VC_LibraryPath_VC_OneCore_CurrentPlatform_spectre)')) or
                                                                ('$(_VC_Target_Library_Platform)' == 'Desktop' and !Exists('$(VC_LibraryPath_VC_Desktop_CurrentPlatform_spectre)'))))이(가) ('' != 'true' and
                                                               'true'=='true' and
                                                               'false' != '' and
                                                               'false' != 'false' and
                                                               (('Desktop' == 'OneCore' and !Exists('C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\lib\spectre\onecore\x64')) or
                                                                ('Desktop' == 'Desktop' and !Exists('C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\lib\spectre\x64'))))(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(VCToolsInstallDir)'=='' and '$(UseEnv)' != 'true')이(가) (''!='true' and 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\'=='' and '' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(WindowsSDKDir)'=='' and '$(UseEnv)' != 'true')이(가) (''!='true' and 'C:\Program Files (x86)\Windows Kits\10\'=='' and '' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(IntDirTrailingSlashWarning)'=='true')이(가) (''!='true' and ''=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(OutDirTrailingSlashWarning)'=='true')이(가) (''!='true' and ''=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('%(CompatibilityIssues.Identity)' != '' and '$(DesignTimeBuild)'!='true')이(가) ('' != '' and ''!='true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(IgnoreWarnIntDirSharingDetected)' != 'true' and '$(IntDirSharingDetected)' == 'true')이(가) ('' != 'true' and '' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(DesignTimeBuild)'!='true' and '$(IgnoreWarnIntDirInTempDetected)' != 'true' and ('$(IntDirFullPath.StartsWith($(Tmp), true, null))' == 'true' or '$(IntDirFullPath.StartsWith($(Temp), true, null))' == 'true' or '$(OutDirFullPath.StartsWith($(Tmp), true, null))' == 'true' or '$(OutDirFullPath.StartsWith($(Temp), true, null))' == 'true'))이(가) (''!='true' and '' != 'true' and ('False' == 'true' or 'False' == 'true' or 'False' == 'true' or 'False' == 'true'))(으)로 확인되었습니다.
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "PrepareForBuild" 대상을 빌드했습니다.
       "_PrepareForReferenceResolution" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "ComputeCrtSDKReference" 대상을 건너뜁니다. ('@(ClCompile)'!='' and '$(WindowsAppContainer)'=='true' and '$(UseCrtSDKReference)' != 'false')이(가) ('TestClient.cpp'!='' and 'false'=='true' and '' != 'false')(으)로 확인되었습니다.
       조건이 잘못되어 "GetInstalledSDKLocations" 대상을 건너뜁니다. ('@(SDKReference)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "ResolveSDKReferences" 대상("ResolveAssemblyReferences" 대상이 종속됨):
       조건이 잘못되어 "ResolveSDKReference" 작업을 건너뜁니다. ('@(SDKReference)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ResolveSDKReferences" 대상을 빌드했습니다.
       "ResolveSDKReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "ExpandSDKReferences" 대상("ResolveAssemblyReferences" 대상이 종속됨):
       조건이 잘못되어 "GetSDKReferenceFiles" 작업을 건너뜁니다. ('@(ResolvedSDKReference)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ExpandSDKReferences" 대상을 빌드했습니다.
       조건이 잘못되어 "ResolveNuGetPackageAssets" 대상을 건너뜁니다. ('$(ResolveNuGetPackages)' == 'true' and exists('$(ProjectLockFile)'))이(가) ('true' == 'true' and exists('obj\project.assets.json'))(으)로 확인되었습니다.
       조건이 잘못되어 "ImplicitlyExpandNETStandardFacades" 대상을 건너뜁니다. ('$(ImplicitlyExpandNETStandardFacades)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "_HandlePackageFileConflicts" 대상을 건너뜁니다. ('@(Reference)' != '' Or '@(ReferenceCopyLocalPaths)' != '')이(가) ('' != '' Or '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "ImplicitlyExpandNETStandardFacades" 대상을 건너뜁니다. ('$(ImplicitlyExpandNETStandardFacades)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "ResolveAssemblyReferences" 대상("ResolveReferences" 대상이 종속됨):
       조건이 잘못되어 "ResolveAssemblyReference" 작업을 건너뜁니다. ('@(Reference)'!='' or '@(_ResolvedProjectReferencePaths)'!='' or '@(_ExplicitReference)' != '')이(가) (''!='' or ''!='' or '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ResolveAssemblyReferences" 대상을 빌드했습니다.
       조건이 잘못되어 "GenerateBindingRedirects" 대상을 건너뜁니다. ('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true')이(가) ('' == 'true' and 'true' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "_RemoveZipFileSuggestedRedirect" 대상을 건너뜁니다. ('$(_TargetFrameworkVersionWithoutV)' >= '4.7.1' And '$(AllowZipFileRedirect)' != 'true')이(가) ('4.0' >= '4.7.1' And '' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "GenerateBindingRedirectsUpdateAppConfig" 대상을 건너뜁니다. ('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true' and Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)'))이(가) ('' == 'true' and 'true' == 'true' and Exists('x64\Debug\TestClient.exe.config'))(으)로 확인되었습니다.
       조건이 잘못되어 "ResolveComReferences" 대상을 건너뜁니다. ('@(COMReference)'!='' or '@(COMFileReference)'!='')이(가) (''!='' or ''!='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "AfterResolveReferences" 대상("ResolveReferences" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterResolveReferences" 대상을 빌드했습니다.
       조건이 잘못되어 "ImplicitlyExpandDesignTimeFacades" 대상을 건너뜁니다. ('$(ImplicitlyExpandDesignTimeFacades)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "ResolveTestReferences" 대상을 건너뜁니다. ('@(Shadow)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "ResolveReferences" 대상("Build" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ResolveReferences" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "InitializeBuildStatus" 대상("Build" 대상이 종속됨):
       "ReadLinesFromFile" 작업
       "ReadLinesFromFile" 작업을 실행했습니다.
       "WriteLinesToFile" 작업
       "WriteLinesToFile" 작업을 실행했습니다.
       "Touch" 작업
         "x64\Debug\TestClient.tlog\unsuccessfulbuild"에 연결(touching)하고 있습니다.
       "Touch" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "InitializeBuildStatus" 대상을 빌드했습니다.
       "PrepareProjectReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildGenerateSourcesTraverse" 대상("BuildGenerateSources" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('$(BuildPassReferences)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != '' and '%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true')이(가) ('' == 'true' and '' != '' and '' != '' and '' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "BuildGenerateSourcesTraverse" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "BeforeBuildGenerateSources" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeBuildGenerateSources" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "PreBuildEvent" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('%(PreBuildEvent.Message)' != '' and '%(PreBuildEvent.Command)' != '')이(가) ('' != '' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('%(PreBuildEvent.Command)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "PreBuildEvent" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "InitializeBuildStatus" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "SetBuildDefaultEnvironmentVariables" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "SetUserMacroEnvironmentVariables" 대상을 건너뜁니다. ('@(BuildMacro)' != '' and '$(DesignTimeBuild)' != 'true')이(가) ('' != '' and '' != 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_SelectedFiles" 대상("SelectCustomBuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_SelectedFiles" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "SelectCustomBuild" 대상("CustomBuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "SelectCustomBuild" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCustomBuildOutput" 대상("CustomBuild" 대상이 종속됨):
       조건이 잘못되어 "CreateItem" 작업을 건너뜁니다. ('%(CustomBuildOutputs.OutputItemType)'!='')이(가) (''!='')(으)로 확인되었습니다.
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCustomBuildOutput" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "CustomBuild" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "GetOutOfDateItems" 작업을 사용합니다.
       "GetOutOfDateItems" 작업
       "GetOutOfDateItems" 작업을 실행했습니다.
       "GetOutOfDateItems" 작업
       "GetOutOfDateItems" 작업을 실행했습니다.
       조건이 잘못되어 "ParallelCustomBuild" 작업을 건너뜁니다. ('@(_ParallelCustomBuild)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "CustomBuild" 작업을 건너뜁니다. ('@(_CustomBuild)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CustomBuild" 대상을 빌드했습니다.
       조건이 잘못되어 "FxExport" 대상을 건너뜁니다. ('@(FxCompile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "FxCompile" 대상을 건너뜁니다. ('@(FxCompile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "_CreateCopyFileItems" 대상을 건너뜁니다. ('@(CopyFileToFolders)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       "_SelectedFiles" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "CopyFileToFolders" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
       "GetOutOfDateItems" 작업
       "GetOutOfDateItems" 작업을 실행했습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('@(_OutOfDateCopyFile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CopyFileToFolders" 대상을 빌드했습니다.
       조건이 잘못되어 "Xsd" 대상을 건너뜁니다. ('@(Xsd)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Xsd" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_Xsd" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForMidl" 대상("_Midl" 대상이 종속됨):
       "Makedir" 작업
       "Makedir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForMidl" 대상을 빌드했습니다.
       조건이 잘못되어 "Midl" 대상을 건너뜁니다. ('@(Midl)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "FxExport" 대상을 건너뜁니다. ('@(FxCompile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "FxCompile" 대상을 건너뜁니다. ('@(FxCompile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeMIDLGeneratedCompileInputs" 대상("_Midl" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeMIDLGeneratedCompileInputs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterMidl" 대상("_Midl" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterMidl" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Midl" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_Midl" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "AfterBuildGenerateSources" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterBuildGenerateSources" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterBuildGenerateSourcesEvent" 대상("_BuildGenerateSourcesAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterBuildGenerateSourcesEvent" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_BuildGenerateSourcesAction" 대상("BuildGenerateSources" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_BuildGenerateSourcesAction" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildGenerateSources" 대상("Build" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BuildGenerateSources" 대상을 빌드했습니다.
       "PrepareProjectReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildCompileTraverse" 대상("BuildCompile" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('$(BuildPassReferences)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''  and '%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true')이(가) ('' == 'true' and '' != '' and '' != ''  and '' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "BuildCompileTraverse" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "BeforeClCompile" 대상("_ClCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeClCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "GenerateTargetFrameworkMonikerAttribute" 대상을 건너뜁니다. ('$(GenerateTargetFrameworkAttribute)' == 'true')이(가) ('false' == 'true')(으)로 확인되었습니다.
       "ComputeMIDLGeneratedCompileInputs" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCLInputPDBName" 대상("_ClCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCLInputPDBName" 대상을 빌드했습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "FindReferenceAssembliesForReferences" 대상("ComputeReferenceCLInput" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "FindReferenceAssembliesForReferences" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "GetReferencedVCProjectsInfo" 대상("ComputeReferenceCLInput" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != '')이(가) ('' == '.vcxproj' and '' != '' and '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "GetReferencedVCProjectsInfo" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeReferenceCLInput" 대상("_ClCompile" 대상이 종속됨):
       조건이 잘못되어 "WriteLinesToFile" 작업을 건너뜁니다. ('@(_ReferenceOutputsToCopyLocally)'!='' and '$(DesignTimeBuild)' != 'true' and '$(TrackFileAccess)' == 'true')이(가) (''!='' and '' != 'true' and 'true' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "WriteLinesToFile" 작업을 건너뜁니다. ('@(_ReferenceOutputsToCopyLocally)'!='' and '$(DesignTimeBuild)' != 'true' and '$(TrackFileAccess)' == 'true')이(가) (''!='' and '' != 'true' and 'true' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(_REFERENCE_DEBUG)'=='true')이(가) (''=='true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ComputeReferenceCLInput" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "WarnCompileDuplicatedFilename" 대상("_ClCompile" 대상이 종속됨):
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('%(ClCompile.ExcludedFromBuild)' != 'true' and '%(Filename)%(Extension)' != '@(ClCompile->'%(Filename)%(Extension)')' and '%(ObjectFileName)' == '@(ClCompile->Metadata(ObjectFileName)->Distinct())')이(가) ('' != 'true' and 'TestClient.cpp' != 'TestClient.cpp' and 'x64\Debug\' == 'x64\Debug\')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "WarnCompileDuplicatedFilename" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "FixupCLCompileOptions" 대상("_ClCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "FixupCLCompileOptions" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForCl" 대상("_ClCompile" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForCl" 대상을 빌드했습니다.
       "_SelectedFiles" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "GenerateTargetFrameworkMonikerAttribute" 대상을 건너뜁니다. ('$(GenerateTargetFrameworkAttribute)' == 'true')이(가) ('false' == 'true')(으)로 확인되었습니다.
       "ComputeMIDLGeneratedCompileInputs" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ComputeCLInputPDBName" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ComputeReferenceCLInput" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "WarnCompileDuplicatedFilename" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "FixupCLCompileOptions" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "SelectCustomBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "SetModuleDependencies" 대상을 건너뜁니다. ('$(DesignTimeBuild)' != 'true' and '$(EnableCppModules)' == 'true')이(가) ('' != 'true' and '' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "SelectClCompile" 대상("ClCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "SelectClCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "SelectAnalysisManifest" 대상을 건너뜁니다. ('$(RunMsvcAnalysis)'=='true' and '$(SelectedFiles)'!='')이(가) ('false'=='true' and ''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "ManagedIncrementalBuildPreProcessDependencyGraph" 대상을 건너뜁니다. ('@(ClCompile)' != '' and '$(EnableManagedIncrementalBuild)' == 'True')이(가) ('TestClient.cpp' != '' and 'false' == 'True')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets" 파일에 있는 "VcpkgTripletSelection" 대상("ClCompile" 대상이 종속됨):
       "Message" 작업
         Using triplet "x64-windows" from "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\"
       "Message" 작업을 실행했습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(VcpkgEnabled)' != 'true')이(가) ('true' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(VcpkgEnabled)' == 'true' and '$(VcpkgNormalizedConfiguration)' == '')이(가) ('true' == 'true' and 'Debug' == '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "VcpkgTripletSelection" 대상을 빌드했습니다.
       조건이 잘못되어 "VcpkgInstallManifestDependencies" 대상을 건너뜁니다. ('$(VcpkgEnabled)' == 'true' and '$(VcpkgEnableManifest)' == 'true' and '$(VcpkgManifestInstall)' == 'true')이(가) ('true' == 'true' and 'false' == 'true' and 'true' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets" 파일에 있는 "VcpkgCheckManifestRoot" 대상("VcpkgInstallManifestDependencies" 대상이 종속됨):
       조건이 잘못되어 "Error" 작업을 건너뜁니다. ('$(VcpkgEnableManifest)' == 'true' and '$(VcpkgManifestRoot)' == '')이(가) ('false' == 'true' and '' == '')(으)로 확인되었습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(VcpkgEnableManifest)' != 'true' and '$(VcpkgManifestRoot)' != '')이(가) ('false' != 'true' and '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "VcpkgCheckManifestRoot" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "ClCompile" 대상("_ClCompile" 대상이 종속됨):
       "Delete" 작업
       "Delete" 작업을 실행했습니다.
       조건이 잘못되어 "MultiToolTask" 작업을 건너뜁니다. ('%(ClCompile.ExcludedFromBuild)' != 'true' and '%(ClCompile.CompilerIteration)' == 'Modules')이(가) ('' != 'true' and '' == 'Modules')(으)로 확인되었습니다.
       조건이 잘못되어 "MultiToolTask" 작업을 건너뜁니다. ('%(ClCompile.ExcludedFromBuild)' != 'true' and '%(ClCompile.CompilerIteration)' == '' and '$(MultiProcCL)' == 'true')이(가) ('' != 'true' and '' == '' and 'false' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "CL" 작업을 건너뜁니다. ('%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == '' and '$(MultiProcCL)' != 'true')이(가) ('NotUsing' == 'Create' and ''!='true' and '' == '' and 'false' != 'true')(으)로 확인되었습니다.
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "CL" 작업을 사용합니다.
       "CL" 작업
         PDB "x64\Debug\vc142.pdb" 누락으로 인해 모든 소스 파일을 강제로 다시 컴파일합니다.
         도구로 전달된 환경 변수:
           VS_UNICODE_OUTPUT=2020
         C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\CL.exe /c /I..\caf\libcaf_core /I..\caf\libcaf_io /I..\protobuf\src /I..\CommonType /I"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\include" /ZI /JMC /nologo /W3 /WX- /diagnostics:column /Od /D _DEBUG /D _CONSOLE /D _UNICODE /D UNICODE /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /permissive- /Zc:wchar_t /Zc:forScope /Zc:inline /std:c++17 /Fo"x64\Debug\\" /Fd"x64\Debug\vc142.pdb" /external:W3 /Gd /TP /FC /errorReport:prompt TestClient.cpp
         추적 명령:
         C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Tracker.exe /d "C:\Program Files (x86)\MSBuild\15.0\FileTracker\FileTracker32.dll" /i D:\GitHub\WeizenbierGame\TestClient\x64\Debug\TestClient.tlog /r D:\GITHUB\WEIZENBIERGAME\TESTCLIENT\TESTCLIENT.CPP /b MSBuildConsole_CancelEvent971c31d0df2848b88230f391993babba  /c "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\CL.exe"  /c /I..\caf\libcaf_core /I..\caf\libcaf_io /I..\protobuf\src /I..\CommonType /I"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\include" /ZI /JMC /nologo /W3 /WX- /diagnostics:column /Od /D _DEBUG /D _CONSOLE /D _UNICODE /D UNICODE /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /permissive- /Zc:wchar_t /Zc:forScope /Zc:inline /std:c++17 /Fo"x64\Debug\\" /Fd"x64\Debug\vc142.pdb" /external:W3 /Gd /TP /FC /errorReport:prompt TestClient.cpp
         TestClient.cpp
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\comparable.hpp(1,1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\message_data.hpp(183,31): warning C4251: 'caf::detail::message_data::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::detail::message_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\message_data.hpp(184,16): warning C4251: 'caf::detail::message_data::types_': class 'caf::type_id_list'에서는 class 'caf::detail::message_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\type_id_list.hpp(21): message : 'caf::type_id_list' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message.hpp(195,12): warning C4251: 'caf::message::data_': class 'caf::intrusive_cow_ptr<caf::detail::message_data>'에서는 class 'caf::message'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message.hpp(28): message : 'caf::intrusive_cow_ptr<caf::detail::message_data>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\error.hpp(187,25): warning C4251: 'caf::error::data_': class 'std::unique_ptr<caf::error::data,std::default_delete<caf::error::data>>'에서는 class 'caf::error'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\error.hpp(187): message : 'std::unique_ptr<caf::error::data,std::default_delete<caf::error::data>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_channel.hpp(76,20): warning C4251: 'caf::abstract_channel::flags_': struct 'std::atomic<int>'에서는 class 'caf::abstract_channel'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2866): message : 'std::atomic<int>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\attachable.hpp(72,31): warning C4251: 'caf::attachable::next': class 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>'에서는 class 'caf::attachable'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\attachable.hpp(72): message : 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\ref_counted.hpp(45,31): warning C4251: 'caf::ref_counted::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::ref_counted'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(78,17): warning C4251: 'caf::uri::impl_type::str': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(81,17): warning C4251: 'caf::uri::impl_type::scheme': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(84,25): warning C4251: 'caf::uri::impl_type::authority': struct 'caf::uri::authority_type'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(42): message : 'caf::uri::authority_type' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(87,17): warning C4251: 'caf::uri::impl_type::path': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(90,20): warning C4251: 'caf::uri::impl_type::query': class 'caf::detail::unordered_flat_map<std::string,std::string,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
                 with
                 [
                     Key=std::string,
                     T=std::string
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(63): message : 'caf::detail::unordered_flat_map<std::string,std::string,std::allocator<std::pair<Key,T>>>' 선언을 참조하십시오.
                 with
                 [
                     Key=std::string,
                     T=std::string
                 ]
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(93,17): warning C4251: 'caf::uri::impl_type::fragment': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(124,33): warning C4251: 'caf::uri::impl_type::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(210,12): warning C4251: 'caf::uri::impl_': class 'caf::intrusive_ptr<caf::uri::impl_type>'에서는 class 'caf::uri'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(128): message : 'caf::intrusive_ptr<caf::uri::impl_type>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(108,16): warning C4251: 'caf::node_id_data::content': class 'caf::variant<caf::uri,caf::hashed_node_id>'에서는 class 'caf::node_id_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(77): message : 'caf::variant<caf::uri,caf::hashed_node_id>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(200,31): warning C4251: 'caf::node_id::data_': class 'caf::intrusive_ptr<caf::node_id_data>'에서는 class 'caf::node_id'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(200): message : 'caf::intrusive_ptr<caf::node_id_data>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_control_block.hpp(71,23): warning C4251: 'caf::actor_control_block::strong_refs': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_control_block'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_control_block.hpp(72,23): warning C4251: 'caf::actor_control_block::weak_refs': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_control_block'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(26,20): warning C4251: 'caf::mailbox_element::sender': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(29,14): warning C4251: 'caf::mailbox_element::mid': class 'caf::message_id'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_id.hpp(21): message : 'caf::message_id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(33,20): warning C4251: 'caf::mailbox_element::stages': class 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\type_id.hpp(430): message : 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(46,41): warning C4251: 'caf::mailbox_element::enqueue_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(698): message : 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_actor.hpp(207,22): warning C4251: 'caf::abstract_actor::mtx_': class 'std::mutex'에서는 class 'caf::abstract_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor.hpp(157,20): warning C4251: 'caf::actor::ptr_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_addr.hpp(128,18): warning C4251: 'caf::actor_addr::ptr_': class 'caf::weak_intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_addr'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(370): message : 'caf::weak_intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_group.hpp(76,20): warning C4251: 'caf::abstract_group::parent_': class 'caf::intrusive_ptr<caf::group_module>'에서는 class 'caf::abstract_group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(374): message : 'caf::intrusive_ptr<caf::group_module>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_group.hpp(78,15): warning C4251: 'caf::abstract_group::identifier_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::abstract_group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_manager.hpp(260,14): warning C4251: 'caf::downstream_manager::last_send_': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::downstream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(698): message : 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_msg.hpp(88,16): warning C4251: 'caf::downstream_msg::slots': struct 'caf::stream_slots'에서는 struct 'caf::downstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_slot.hpp(22): message : 'caf::stream_slots' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_msg.hpp(98,16): warning C4251: 'caf::downstream_msg::content': class 'caf::variant<caf::downstream_msg::batch,caf::downstream_msg::close,caf::downstream_msg::forced_close>'에서는 struct 'caf::downstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_msg.hpp(69): message : 'caf::variant<caf::downstream_msg::batch,caf::downstream_msg::close,caf::downstream_msg::forced_close>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\shared_spinlock.hpp(33,21): warning C4251: 'caf::detail::shared_spinlock::flag_': struct 'std::atomic<long>'에서는 class 'caf::detail::shared_spinlock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2868): message : 'std::atomic<long>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(127,17): warning C4251: 'caf::logger::event::message': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(130,21): warning C4251: 'caf::logger::event::tid': class 'std::thread::id'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\thread(39): message : 'std::thread::id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(136,15): warning C4251: 'caf::logger::event::tstamp': class 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\timestamp.hpp(17): message : 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(193,17): warning C4251: 'caf::logger::line_builder::str_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::logger::line_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(327,10): warning C4251: 'caf::logger::cfg_': struct 'caf::logger::config'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(67): message : 'caf::logger::config' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331,28): warning C4251: 'caf::logger::global_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(334,28): warning C4251: 'caf::logger::file_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(337,28): warning C4251: 'caf::logger::console_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(343,19): warning C4251: 'caf::logger::parent_thread_': class 'std::thread::id'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\thread(39): message : 'std::thread::id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(346,13): warning C4251: 'caf::logger::t0_': class 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\timestamp.hpp(17): message : 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(349,15): warning C4251: 'caf::logger::file_format_': class 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(164): message : 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(352,15): warning C4251: 'caf::logger::console_format_': class 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(164): message : 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(355,16): warning C4251: 'caf::logger::file_': class 'std::basic_fstream<char,std::char_traits<char>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\iosfwd(234): message : 'std::basic_fstream<char,std::char_traits<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(358,41): warning C4251: 'caf::logger::queue_': class 'caf::detail::ringbuffer<caf::logger::event,128>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(358): message : 'caf::detail::ringbuffer<caf::logger::event,128>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(361,15): warning C4251: 'caf::logger::file_name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(364,15): warning C4251: 'caf::logger::thread_': class 'std::thread'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\thread(37): message : 'std::thread' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(164,14): warning C4251: 'caf::config_value_reader::st_': class 'std::stack<caf::config_value_reader::value_type,std::vector<caf::config_value_reader::value_type,std::allocator<caf::config_value_reader::value_type>>>'에서는 class 'caf::config_value_reader'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(53): message : 'std::stack<caf::config_value_reader::value_type,std::vector<caf::config_value_reader::value_type,std::allocator<caf::config_value_reader::value_type>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(167,46): warning C4251: 'caf::config_value_reader::scratch_space_': class 'std::vector<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>,std::allocator<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>>>'에서는 class 'caf::config_value_reader'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(167): message : 'std::vector<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>,std::allocator<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_writer.hpp(126,14): warning C4251: 'caf::config_value_writer::st_': class 'std::stack<caf::config_value_writer::value_type,std::vector<caf::config_value_writer::value_type,std::allocator<caf::config_value_writer::value_type>>>'에서는 class 'caf::config_value_writer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_writer.hpp(34): message : 'std::stack<caf::config_value_writer::value_type,std::vector<caf::config_value_writer::value_type,std::allocator<caf::config_value_writer::value_type>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value.hpp(318,16): warning C4251: 'caf::config_value::data_': class 'caf::variant<caf::none_t,caf::config_value::integer,caf::config_value::boolean,caf::config_value::real,caf::timespan,caf::uri,caf::config_value::string,caf::config_value::list,caf::config_value::dictionary>'에서는 class 'caf::config_value'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\type_list.hpp(1023): message : 'caf::variant<caf::none_t,caf::config_value::integer,caf::config_value::boolean,caf::config_value::real,caf::timespan,caf::uri,caf::config_value::string,caf::config_value::list,caf::config_value::dictionary>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\label.hpp(61,15): warning C4251: 'caf::telemetry::label::str_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::label'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\dbl_gauge.hpp(84,23): warning C4251: 'caf::telemetry::dbl_gauge::value_': struct 'std::atomic<double>'에서는 class 'caf::telemetry::dbl_gauge'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\dbl_gauge.hpp(84): message : 'std::atomic<double>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\int_gauge.hpp(94,24): warning C4251: 'caf::telemetry::int_gauge::value_': struct 'std::atomic<__int64>'에서는 class 'caf::telemetry::int_gauge'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2870): message : 'std::atomic<__int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\upstream_msg.hpp(116,16): warning C4251: 'caf::upstream_msg::slots': struct 'caf::stream_slots'에서는 struct 'caf::upstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_slot.hpp(22): message : 'caf::stream_slots' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\upstream_msg.hpp(126,16): warning C4251: 'caf::upstream_msg::content': class 'caf::variant<caf::upstream_msg::ack_open,caf::upstream_msg::ack_batch,caf::upstream_msg::drop,caf::upstream_msg::forced_drop>'에서는 struct 'caf::upstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\upstream_msg.hpp(97): message : 'caf::variant<caf::upstream_msg::ack_open,caf::upstream_msg::ack_batch,caf::upstream_msg::drop,caf::upstream_msg::forced_drop>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(86,20): warning C4251: 'caf::inbound_path::hdl': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(89,16): warning C4251: 'caf::inbound_path::slots': struct 'caf::stream_slots'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_slot.hpp(22): message : 'caf::stream_slots' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(119,38): warning C4251: 'caf::inbound_path::controller_': class 'std::unique_ptr<caf::credit_controller,std::default_delete<caf::credit_controller>>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(119): message : 'std::unique_ptr<caf::credit_controller,std::default_delete<caf::credit_controller>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(122,14): warning C4251: 'caf::inbound_path::last_ack_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(698): message : 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(304,22): warning C4251: 'caf::stream_manager::inbound_paths_': class 'std::vector<caf::inbound_path *,std::allocator<caf::inbound_path *>>'에서는 class 'caf::stream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(48): message : 'std::vector<caf::inbound_path *,std::allocator<caf::inbound_path *>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(317,12): warning C4251: 'caf::stream_manager::max_batch_delay_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::stream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_module.hpp(55,15): warning C4251: 'caf::group_module::name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group.hpp(153,22): warning C4251: 'caf::group::ptr_': class 'caf::intrusive_ptr<caf::abstract_group>'에서는 class 'caf::group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_group.hpp(83): message : 'caf::intrusive_ptr<caf::abstract_group>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\outbound_path.hpp(135,16): warning C4251: 'caf::outbound_path::slots': struct 'caf::stream_slots'에서는 class 'caf::outbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_slot.hpp(22): message : 'caf::stream_slots' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\outbound_path.hpp(138,20): warning C4251: 'caf::outbound_path::hdl': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::outbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(206,22): warning C4251: 'caf::response_promise::state::source': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(207,22): warning C4251: 'caf::response_promise::state::stages': class 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\type_id.hpp(430): message : 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(208,16): warning C4251: 'caf::response_promise::state::id': class 'caf::message_id'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_id.hpp(21): message : 'caf::message_id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(222,24): warning C4251: 'caf::response_promise::state_': class 'caf::intrusive_ptr<caf::response_promise::state>'에서는 class 'caf::response_promise'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(222): message : 'caf::intrusive_ptr<caf::response_promise::state>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_impl.hpp(65,12): warning C4251: 'caf::detail::behavior_impl::timeout_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::detail::behavior_impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\behavior.hpp(122,12): warning C4251: 'caf::behavior::impl_': class 'caf::intrusive_ptr<caf::detail::behavior_impl>'에서는 class 'caf::behavior'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_impl.hpp(42): message : 'caf::intrusive_ptr<caf::detail::behavior_impl>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_handler.hpp(111,12): warning C4251: 'caf::message_handler::impl_': class 'caf::intrusive_ptr<caf::detail::behavior_impl>'에서는 class 'caf::message_handler'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_impl.hpp(42): message : 'caf::intrusive_ptr<caf::detail::behavior_impl>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_config.hpp(36,51): warning C4251: 'caf::actor_config::init_fun': class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>'에서는 class 'caf::actor_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_config.hpp(23): message : 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(113,22): warning C4251: 'caf::actor_registry::running_mtx_': class 'std::mutex'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(114,35): warning C4251: 'caf::actor_registry::running_cv_': class 'std::condition_variable'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(583): message : 'std::condition_variable' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(117,11): warning C4251: 'caf::actor_registry::entries_': class 'std::unordered_map<caf::actor_id,caf::strong_actor_ptr,std::hash<uint64_t>,std::equal_to<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,caf::strong_actor_ptr>>>'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(109): message : 'std::unordered_map<caf::actor_id,caf::strong_actor_ptr,std::hash<uint64_t>,std::equal_to<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,caf::strong_actor_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(119,12): warning C4251: 'caf::actor_registry::named_entries_': class 'std::unordered_map<std::string,caf::strong_actor_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::strong_actor_ptr>>>'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(86): message : 'std::unordered_map<std::string,caf::strong_actor_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::strong_actor_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(18,61): warning C4275: DLL 인터페이스가 아닌 class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>::wrapper'이(가) DLL 인터페이스 class 'caf::detail::init_fun_factory_helper_base'의 기본으로 사용되었습니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\unique_function.hpp(23): message : 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>::wrapper' 선언을 참조하십시오.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(17): message : 'caf::detail::init_fun_factory_helper_base' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(40,17): warning C4251: 'caf::detail::init_fun_factory_helper_base::hook_': class 'caf::detail::unique_function<void (caf::local_actor *)>'에서는 class 'caf::detail::init_fun_factory_helper_base'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(24): message : 'caf::detail::unique_function<void (caf::local_actor *)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(72,18): warning C4251: 'caf::group_manager::get_remote': class 'std::function<caf::expected<caf::group> (const caf::node_id &,const std::string &,const std::string &)>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(32): message : 'std::function<caf::expected<caf::group> (const caf::node_id &,const std::string &,const std::string &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(88,15): warning C4251: 'caf::group_manager::mmap_': class 'std::unordered_map<std::string,caf::group_module_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::group_module_ptr>>>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(29): message : 'std::unordered_map<std::string,caf::group_module_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::group_module_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(90,23): warning C4251: 'caf::group_manager::ad_hoc_id_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric.hpp(37,22): warning C4251: 'caf::telemetry::metric::labels_': class 'std::vector<caf::telemetry::label,std::allocator<caf::telemetry::label>>'에서는 class 'caf::telemetry::metric'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric.hpp(22): message : 'std::vector<caf::telemetry::label,std::allocator<caf::telemetry::label>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(73,15): warning C4251: 'caf::telemetry::metric_family::prefix_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(74,15): warning C4251: 'caf::telemetry::metric_family::name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(75,28): warning C4251: 'caf::telemetry::metric_family::label_names_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(76,15): warning C4251: 'caf::telemetry::metric_family::helptext_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(77,15): warning C4251: 'caf::telemetry::metric_family::unit_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_registry.hpp(515,22): warning C4251: 'caf::telemetry::metric_registry::families_mx_': class 'std::mutex'에서는 class 'caf::telemetry::metric_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_registry.hpp(516,47): warning C4251: 'caf::telemetry::metric_registry::families_': class 'std::vector<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>,std::allocator<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>>>'에서는 class 'caf::telemetry::metric_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_registry.hpp(516): message : 'std::vector<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>,std::allocator<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(680,23): warning C4251: 'caf::actor_system::ids_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(692,30): warning C4251: 'caf::actor_system::logger_': class 'caf::intrusive_ptr<caf::logger>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(692): message : 'caf::intrusive_ptr<caf::logger>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(710,20): warning C4251: 'caf::actor_system::config_serv_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(713,20): warning C4251: 'caf::actor_system::spawn_serv_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(720,21): warning C4251: 'caf::actor_system::logger_dtor_done_': struct 'std::atomic<bool>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2859): message : 'std::atomic<bool>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(723,22): warning C4251: 'caf::actor_system::logger_dtor_mtx_': class 'std::mutex'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(726,35): warning C4251: 'caf::actor_system::logger_dtor_cv_': class 'std::condition_variable'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(583): message : 'std::condition_variable' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(733,28): warning C4251: 'caf::actor_system::metrics_actors_includes_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(737,28): warning C4251: 'caf::actor_system::metrics_actors_excludes_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(743,31): warning C4251: 'caf::actor_system::private_threads_': class 'caf::detail::private_thread_pool'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\private_thread_pool.hpp(31): message : 'caf::detail::private_thread_pool' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(746,42): warning C4251: 'caf::actor_system::meta_objects_guard_': class 'caf::intrusive_ptr<caf::ref_counted>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(364): message : 'caf::intrusive_ptr<caf::ref_counted>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\abstract_coordinator.hpp(80,23): warning C4251: 'caf::scheduler::abstract_coordinator::next_worker_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::scheduler::abstract_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\monitorable_actor.hpp(141,35): warning C4251: 'caf::monitorable_actor::cv_': class 'std::condition_variable'에서는 class 'caf::monitorable_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(583): message : 'std::condition_variable' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\monitorable_actor.hpp(144,18): warning C4251: 'caf::monitorable_actor::attachables_head_': class 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>'에서는 class 'caf::monitorable_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\attachable.hpp(72): message : 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(43,20): warning C4251: 'caf::decorator::sequencer::f_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(44,20): warning C4251: 'caf::decorator::sequencer::g_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(45,21): warning C4251: 'caf::decorator::sequencer::msg_types_': class 'std::set<std::string,std::less<std::string>,std::allocator<std::string>>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\type_id.hpp(380): message : 'std::set<std::string,std::less<std::string>,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\local_actor.hpp(452,14): warning C4251: 'caf::local_actor::last_request_id_': class 'caf::message_id'에서는 class 'caf::local_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_id.hpp(21): message : 'caf::message_id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\local_actor.hpp(455,51): warning C4251: 'caf::local_actor::initial_behavior_fac_': class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>'에서는 class 'caf::local_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_config.hpp(23): message : 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(60,25): warning C4251: 'caf::detail::behavior_stack::elements_': class 'std::vector<caf::behavior,std::allocator<caf::behavior>>'에서는 class 'caf::detail::behavior_stack'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(60): message : 'std::vector<caf::behavior,std::allocator<caf::behavior>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(61,25): warning C4251: 'caf::detail::behavior_stack::erased_elements_': class 'std::vector<caf::behavior,std::allocator<caf::behavior>>'에서는 class 'caf::detail::behavior_stack'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(60): message : 'std::vector<caf::behavior,std::allocator<caf::behavior>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\policy\downstream_messages.hpp(71,18): warning C4251: 'caf::policy::downstream_messages::nested::handler': class 'std::unique_ptr<caf::inbound_path,std::default_delete<caf::inbound_path>>'에서는 class 'caf::policy::downstream_messages::nested'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(46): message : 'std::unique_ptr<caf::inbound_path,std::default_delete<caf::inbound_path>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(639,16): warning C4251: 'caf::scheduled_actor::mailbox_': class 'caf::intrusive::fifo_inbox<caf::scheduled_actor::mailbox_policy>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(159): message : 'caf::intrusive::fifo_inbox<caf::scheduled_actor::mailbox_policy>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(648,39): warning C4251: 'caf::scheduled_actor::awaited_responses_': class 'std::forward_list<caf::scheduled_actor::pending_response,std::allocator<caf::scheduled_actor::pending_response>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(648): message : 'std::forward_list<caf::scheduled_actor::pending_response,std::allocator<caf::scheduled_actor::pending_response>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(651,52): warning C4251: 'caf::scheduled_actor::multiplexed_responses_': class 'caf::detail::unordered_flat_map<caf::message_id,caf::behavior,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
                 with
                 [
                     Key=caf::message_id,
                     T=caf::behavior
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(651): message : 'caf::detail::unordered_flat_map<caf::message_id,caf::behavior,std::allocator<std::pair<Key,T>>>' 선언을 참조하십시오.
                 with
                 [
                     Key=caf::message_id,
                     T=caf::behavior
                 ]
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(654,19): warning C4251: 'caf::scheduled_actor::default_handler_': class 'std::function<caf::skippable_result (caf::scheduled_actor *,caf::message &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\skip.hpp(20): message : 'std::function<caf::skippable_result (caf::scheduled_actor *,caf::message &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(657,17): warning C4251: 'caf::scheduled_actor::error_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::error &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(171): message : 'std::function<void (caf::scheduled_actor::pointer,caf::error &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(660,16): warning C4251: 'caf::scheduled_actor::down_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::down_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(174): message : 'std::function<void (caf::scheduled_actor::pointer,caf::down_msg &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(663,21): warning C4251: 'caf::scheduled_actor::node_down_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::node_down_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(177): message : 'std::function<void (caf::scheduled_actor::pointer,caf::node_down_msg &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(666,16): warning C4251: 'caf::scheduled_actor::exit_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::exit_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(180): message : 'std::function<void (caf::scheduled_actor::pointer,caf::exit_msg &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(669,22): warning C4251: 'caf::scheduled_actor::stream_managers_': class 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(114): message : 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(673,22): warning C4251: 'caf::scheduled_actor::pending_stream_managers_': class 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(114): message : 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(677,12): warning C4251: 'caf::scheduled_actor::max_batch_delay_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(686,30): warning C4251: 'caf::scheduled_actor::inbound_stream_metrics_': class 'std::unordered_map<caf::type_id_t,caf::local_actor::inbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::inbound_stream_metrics_t>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(107): message : 'std::unordered_map<caf::type_id_t,caf::local_actor::inbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::inbound_stream_metrics_t>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(689,31): warning C4251: 'caf::scheduled_actor::outbound_stream_metrics_': class 'std::unordered_map<caf::type_id_t,caf::local_actor::outbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::outbound_stream_metrics_t>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(111): message : 'std::unordered_map<caf::type_id_t,caf::local_actor::outbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::outbound_stream_metrics_t>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(693,21): warning C4251: 'caf::scheduled_actor::exception_handler_': class 'std::function<caf::error (caf::scheduled_actor::pointer,std::exception_ptr &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(184): message : 'std::function<caf::error (caf::scheduled_actor::pointer,std::exception_ptr &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\event_based_actor.hpp(39,41): warning C4251: 'caf::mixin::subscriber<B,D>::subscriptions_': class 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>'에서는 class 'caf::mixin::subscriber<B,D>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
                 with
                 [
                     B=caf::mixin::requester<caf::mixin::sender<caf::scheduled_actor,caf::event_based_actor>,caf::event_based_actor>,
                     D=caf::event_based_actor
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mixin\subscriber.hpp(28): message : 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_pool.hpp(110,22): warning C4251: 'caf::actor_pool::workers_': class 'std::vector<caf::actor,std::allocator<caf::actor>>'에서는 class 'caf::actor_pool'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\type_id.hpp(427): message : 'std::vector<caf::actor,std::allocator<caf::actor>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_pool.hpp(111,10): warning C4251: 'caf::actor_pool::policy_': class 'std::function<void (caf::actor_system &,caf::actor_pool::uplock &,const caf::actor_pool::actor_vec &,caf::mailbox_element_ptr &,caf::execution_unit *)>'에서는 class 'caf::actor_pool'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_pool.hpp(48): message : 'std::function<void (caf::actor_system &,caf::actor_pool::uplock &,const caf::actor_pool::actor_vec &,caf::mailbox_element_ptr &,caf::execution_unit *)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option.hpp(105,27): warning C4251: 'caf::config_option::buf_': class 'std::unique_ptr<char [],std::default_delete<char []>>'에서는 class 'caf::config_option'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option.hpp(105): message : 'std::unique_ptr<char [],std::default_delete<char []>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option_set.hpp(176,17): warning C4251: 'caf::config_option_set::opts_': class 'std::vector<caf::config_option,std::allocator<caf::config_option>>'에서는 class 'caf::config_option_set'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option_set.hpp(35): message : 'std::vector<caf::config_option,std::allocator<caf::config_option>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(79,12): warning C4251: 'caf::actor_system_config::content': class 'caf::dictionary<caf::config_value>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(198): message : 'caf::dictionary<caf::config_value>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(181,15): warning C4251: 'caf::actor_system_config::program_name': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(184,15): warning C4251: 'caf::actor_system_config::remainder': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(200,15): warning C4251: 'caf::actor_system_config::slave_name': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(203,15): warning C4251: 'caf::actor_system_config::bootstrap_node': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(208,12): warning C4251: 'caf::actor_system_config::stream_max_batch_delay': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(211,12): warning C4251: 'caf::actor_system_config::stream_credit_round_interval': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(215,15): warning C4251: 'caf::actor_system_config::openssl_certificate': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(216,15): warning C4251: 'caf::actor_system_config::openssl_key': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(217,15): warning C4251: 'caf::actor_system_config::openssl_passphrase': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(218,15): warning C4251: 'caf::actor_system_config::openssl_capath': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(219,15): warning C4251: 'caf::actor_system_config::openssl_cafile': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(223,21): warning C4251: 'caf::actor_system_config::actor_factories': class 'std::unordered_map<std::string,caf::actor_factory,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::actor_factory>>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(45): message : 'std::unordered_map<std::string,caf::actor_factory,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::actor_factory>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(224,25): warning C4251: 'caf::actor_system_config::module_factories': class 'std::vector<caf::actor_system_config::module_factory,std::allocator<caf::actor_system_config::module_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(49): message : 'std::vector<caf::actor_system_config::module_factory,std::allocator<caf::actor_system_config::module_factory>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(225,23): warning C4251: 'caf::actor_system_config::hook_factories': class 'std::vector<caf::actor_system_config::hook_factory,std::allocator<caf::actor_system_config::hook_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(40): message : 'std::vector<caf::actor_system_config::hook_factory,std::allocator<caf::actor_system_config::hook_factory>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(226,31): warning C4251: 'caf::actor_system_config::group_module_factories': class 'std::vector<caf::actor_system_config::group_module_factory,std::allocator<caf::actor_system_config::group_module_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(57): message : 'std::vector<caf::actor_system_config::group_module_factory,std::allocator<caf::actor_system_config::group_module_factory>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(230,16): warning C4251: 'caf::actor_system_config::thread_hooks_': class 'std::vector<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>,std::allocator<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(42): message : 'std::vector<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>,std::allocator<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(245,15): warning C4251: 'caf::actor_system_config::config_file_path': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(249,28): warning C4251: 'caf::actor_system_config::config_file_path_alternatives': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331): message : 'std::vector<std::string,std::allocator<std::string>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(328,30): warning C4251: 'caf::actor_system_config::c_args_remainder_': class 'std::vector<char *,std::allocator<char *>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(328): message : 'std::vector<char *,std::allocator<char *>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(329,21): warning C4251: 'caf::actor_system_config::c_args_remainder_buf_': class 'std::vector<char,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(329): message : 'std::vector<char,std::allocator<char>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\after.hpp(29,12): warning C4251: 'caf::timeout_definition_builder::tout_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::timeout_definition_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(534): message : 'std::chrono::duration<__int64,std::nano>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_manager_base.hpp(99,12): warning C4251: 'caf::downstream_manager_base::paths_': class 'caf::detail::unordered_flat_map<caf::stream_slot,caf::downstream_manager::unique_path_ptr,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::downstream_manager_base'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
                 with
                 [
                     Key=caf::stream_slot,
                     T=caf::downstream_manager::unique_path_ptr
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_manager_base.hpp(29): message : 'caf::detail::unordered_flat_map<caf::stream_slot,caf::downstream_manager::unique_path_ptr,std::allocator<std::pair<Key,T>>>' 선언을 참조하십시오.
                 with
                 [
                     Key=caf::stream_slot,
                     T=caf::downstream_manager::unique_path_ptr
                 ]
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(53,35): warning C4251: 'caf::mixin::subscriber<B,D>::subscriptions_': class 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>'에서는 class 'caf::mixin::subscriber<B,D>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
                 with
                 [
                     B=caf::mixin::sender<caf::mixin::requester<caf::local_actor,caf::blocking_actor>,caf::blocking_actor>,
                     D=caf::blocking_actor
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mixin\subscriber.hpp(28): message : 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(127,14): warning C4251: 'caf::blocking_actor::receive_while_helper::stmt_': class 'std::function<bool (void)>'에서는 struct 'caf::blocking_actor::receive_while_helper'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(124): message : 'std::function<bool (void)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(176,43): warning C4251: 'caf::blocking_actor::do_receive_helper::cb': class 'std::function<void (caf::blocking_actor::receive_cond &)>'에서는 struct 'caf::blocking_actor::do_receive_helper'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(176): message : 'std::function<void (caf::blocking_actor::receive_cond &)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(428,16): warning C4251: 'caf::blocking_actor::mailbox_': class 'caf::intrusive::fifo_inbox<caf::blocking_actor::mailbox_policy>'에서는 class 'caf::blocking_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(90): message : 'caf::intrusive::fifo_inbox<caf::blocking_actor::mailbox_policy>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scoped_actor.hpp(68,20): warning C4251: 'caf::scoped_actor::self_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::scoped_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_builder.hpp(107,52): warning C4251: 'caf::message_builder::elements_': class 'std::vector<caf::detail::message_builder_element_ptr,std::allocator<caf::detail::message_builder_element_ptr>>'에서는 class 'caf::message_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_builder.hpp(107): message : 'std::vector<caf::detail::message_builder_element_ptr,std::allocator<caf::detail::message_builder_element_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\proxy_registry.hpp(108,22): warning C4251: 'caf::proxy_registry::mtx_': class 'std::mutex'에서는 class 'caf::proxy_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\proxy_registry.hpp(109,42): warning C4251: 'caf::proxy_registry::proxies_': class 'std::unordered_map<caf::node_id,caf::proxy_registry::proxy_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::proxy_registry::proxy_map>>>'에서는 class 'caf::proxy_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\proxy_registry.hpp(109): message : 'std::unordered_map<caf::node_id,caf::proxy_registry::proxy_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::proxy_registry::proxy_map>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(359,16): warning C4251: 'caf::detail::simple_actor_clock::schedule_': class 'std::multimap<caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr,std::less<caf::actor_clock::time_point>,std::allocator<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>'에서는 class 'caf::detail::simple_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(38): message : 'std::multimap<caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr,std::less<caf::actor_clock::time_point>,std::allocator<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(362,20): warning C4251: 'caf::detail::simple_actor_clock::actor_lookup_': class 'std::multimap<caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>,std::less<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>>>>'에서는 class 'caf::detail::simple_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(41): message : 'std::multimap<caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>,std::less<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\test_actor_clock.hpp(14,14): warning C4251: 'caf::detail::test_actor_clock::current_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::detail::test_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono(698): message : 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\test_coordinator.hpp(33,26): warning C4251: 'caf::scheduler::test_coordinator::jobs': class 'std::deque<caf::resumable *,std::allocator<caf::resumable *>>'에서는 class 'caf::scheduler::test_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\test_coordinator.hpp(33): message : 'std::deque<caf::resumable *,std::allocator<caf::resumable *>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\test_coordinator.hpp(163,25): warning C4251: 'caf::scheduler::test_coordinator::after_next_enqueue_': class 'std::function<void (void)>'에서는 class 'caf::scheduler::test_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\timeout_definition.hpp(20): message : 'std::function<void (void)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(81,24): warning C4251: 'caf::detail::local_group_module::impl::mtx_': class 'std::mutex'에서는 class 'caf::detail::local_group_module::impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(84,20): warning C4251: 'caf::detail::local_group_module::impl::subscribers_': class 'std::set<caf::strong_actor_ptr,std::less<void>,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::detail::local_group_module::impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(49): message : 'std::set<caf::strong_actor_ptr,std::less<void>,std::allocator<caf::strong_actor_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(98,14): warning C4251: 'caf::detail::local_group_module::mtx_': class 'std::mutex'에서는 class 'caf::detail::local_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(100,17): warning C4251: 'caf::detail::local_group_module::instances_': class 'std::unordered_map<std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>>>>'에서는 class 'caf::detail::local_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(87): message : 'std::unordered_map<std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\group_tunnel.hpp(62,23): warning C4251: 'caf::detail::group_tunnel::cached_messages_': class 'std::vector<caf::detail::group_tunnel::cached_message,std::allocator<caf::detail::group_tunnel::cached_message>>'에서는 class 'caf::detail::group_tunnel'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\group_tunnel.hpp(26): message : 'std::vector<caf::detail::group_tunnel::cached_message,std::allocator<caf::detail::group_tunnel::cached_message>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(63,14): warning C4251: 'caf::detail::remote_group_module::mtx_': class 'std::mutex'에서는 class 'caf::detail::remote_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(65,13): warning C4251: 'caf::detail::remote_group_module::nodes_': class 'std::unordered_map<caf::node_id,caf::detail::remote_group_module::instances_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::detail::remote_group_module::instances_map>>>'에서는 class 'caf::detail::remote_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(26): message : 'std::unordered_map<caf::node_id,caf::detail::remote_group_module::instances_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::detail::remote_group_module::instances_map>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\manager.hpp(61,20): warning C4251: 'caf::io::network::manager::parent_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::io::network::manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(376): message : 'caf::intrusive_ptr<caf::actor_control_block>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\receive_buffer.hpp(192,14): warning C4251: 'caf::io::network::receive_buffer::buffer_': class 'std::unique_ptr<char [],std::default_delete<char []>>'에서는 class 'caf::io::network::receive_buffer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option.hpp(105): message : 'std::unique_ptr<char [],std::default_delete<char []>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\ip_endpoint.hpp(77,39): warning C4251: 'caf::io::network::ip_endpoint::ptr_': class 'std::unique_ptr<caf::io::network::ip_endpoint::impl,caf::io::network::ip_endpoint::impl_deleter>'에서는 struct 'caf::io::network::ip_endpoint'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\ip_endpoint.hpp(77): message : 'std::unique_ptr<caf::io::network::ip_endpoint::impl,caf::io::network::ip_endpoint::impl_deleter>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(428,14): warning C4251: 'caf::io::abstract_broker::scribes_': class 'std::unordered_map<caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(366): message : 'std::unordered_map<caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(429,15): warning C4251: 'caf::io::abstract_broker::doormen_': class 'std::unordered_map<caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(363): message : 'std::unordered_map<caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(430,24): warning C4251: 'caf::io::abstract_broker::datagram_servants_': class 'std::unordered_map<caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(369): message : 'std::unordered_map<caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(431,15): warning C4251: 'caf::io::abstract_broker::dummy_wr_buf_': class 'std::vector<caf::byte,std::allocator<caf::byte>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(192): message : 'std::vector<caf::byte,std::allocator<caf::byte>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\datagram_servant.hpp(26,69): warning C4251: 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>::hdl_': class 'caf::io::datagram_handle'에서는 class 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\datagram_handle.hpp(24): message : 'caf::io::datagram_handle' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\datagram_servant.hpp(26,69): warning C4251: 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\broker_servant.hpp(53): message : 'caf::optional<size_t>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\doorman.hpp(25,51): warning C4251: 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>::hdl_': class 'caf::io::accept_handle'에서는 class 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\accept_handle.hpp(24): message : 'caf::io::accept_handle' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\doorman.hpp(25,51): warning C4251: 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\broker_servant.hpp(53): message : 'caf::optional<size_t>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\scribe.hpp(25,49): warning C4251: 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>::hdl_': class 'caf::io::connection_handle'에서는 class 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\connection_handle.hpp(24): message : 'caf::io::connection_handle' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\scribe.hpp(25,49): warning C4251: 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\broker_servant.hpp(53): message : 'caf::optional<size_t>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\multiplexer.hpp(154,19): warning C4251: 'caf::io::network::multiplexer::tid_': class 'std::thread::id'에서는 class 'caf::io::network::multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\thread(39): message : 'std::thread::id' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(375,40): warning C4251: 'caf::io::middleman::backend_supervisor_': class 'std::unique_ptr<caf::io::network::multiplexer::supervisor,std::default_delete<caf::io::network::multiplexer::supervisor>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\multiplexer.hpp(92): message : 'std::unique_ptr<caf::io::network::multiplexer::supervisor,std::default_delete<caf::io::network::multiplexer::supervisor>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(378,15): warning C4251: 'caf::io::middleman::thread_': class 'std::thread'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\thread(37): message : 'std::thread' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(381,32): warning C4251: 'caf::io::middleman::named_brokers_': class 'std::map<std::string,caf::actor,std::less<std::string>,std::allocator<std::pair<const std::string,caf::actor>>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(381): message : 'std::map<std::string,caf::actor,std::less<std::string>,std::allocator<std::pair<const std::string,caf::actor>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(384,19): warning C4251: 'caf::io::middleman::manager_': class 'caf::typed_actor<caf::result<uint16_t> (caf::publish_atom,uint16_t,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>,std::string,bool),caf::result<uint16_t> (caf::open_atom,uint16_t,std::string,bool),caf::result<caf::node_id,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>> (caf::connect_atom,std::string,uint16_t),caf::result<void> (caf::unpublish_atom,caf::actor_addr,uint16_t),caf::result<void> (caf::close_atom,uint16_t),caf::result<caf::strong_actor_ptr> (caf::spawn_atom,caf::node_id,std::string,caf::message,std::set<std::string,std::less<std::string>,std::allocator<std::string>>),caf::result<caf::actor> (caf::get_atom,caf::group_atom,caf::node_id,std::string),caf::result<caf::node_id,std::string,uint16_t> (caf::get_atom,caf::node_id)>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman_actor.hpp(74): message : 'caf::typed_actor<caf::result<uint16_t> (caf::publish_atom,uint16_t,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>,std::string,bool),caf::result<uint16_t> (caf::open_atom,uint16_t,std::string,bool),caf::result<caf::node_id,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>> (caf::connect_atom,std::string,uint16_t),caf::result<void> (caf::unpublish_atom,caf::actor_addr,uint16_t),caf::result<void> (caf::close_atom,uint16_t),caf::result<caf::strong_actor_ptr> (caf::spawn_atom,caf::node_id,std::string,caf::message,std::set<std::string,std::less<std::string>,std::allocator<std::string>>),caf::result<caf::actor> (caf::get_atom,caf::group_atom,caf::node_id,std::string),caf::result<caf::node_id,std::string,uint16_t> (caf::get_atom,caf::node_id)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(387,36): warning C4251: 'caf::io::middleman::background_tasks_': class 'std::vector<caf::io::middleman::background_task_ptr,std::allocator<caf::io::middleman::background_task_ptr>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(387): message : 'std::vector<caf::io::middleman::background_task_ptr,std::allocator<caf::io::middleman::background_task_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(390,35): warning C4251: 'caf::io::middleman::remote_groups_': class 'caf::intrusive_ptr<caf::detail::remote_group_module>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(68): message : 'caf::intrusive_ptr<caf::detail::remote_group_module>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(55,33): warning C4251: 'caf::detail::abstract_worker_hub::head_': struct 'std::atomic<caf::detail::abstract_worker *>'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(55): message : 'std::atomic<caf::detail::abstract_worker *>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(57,23): warning C4251: 'caf::detail::abstract_worker_hub::running_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic(2871): message : 'std::atomic<unsigned __int64>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(59,14): warning C4251: 'caf::detail::abstract_worker_hub::mtx_': class 'std::mutex'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(61,27): warning C4251: 'caf::detail::abstract_worker_hub::cv_': class 'std::condition_variable'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(583): message : 'std::condition_variable' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\message_queue.hpp(50,14): warning C4251: 'caf::io::basp::message_queue::lock': class 'std::mutex'에서는 class 'caf::io::basp::message_queue'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\message_queue.hpp(61,26): warning C4251: 'caf::io::basp::message_queue::pending': class 'std::vector<caf::io::basp::message_queue::actor_msg,std::allocator<caf::io::basp::message_queue::actor_msg>>'에서는 class 'caf::io::basp::message_queue'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\message_queue.hpp(61): message : 'std::vector<caf::io::basp::message_queue::actor_msg,std::allocator<caf::io::basp::message_queue::actor_msg>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(74,22): warning C4251: 'caf::io::basp::routing_table::mtx_': class 'std::mutex'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(75,50): warning C4251: 'caf::io::basp::routing_table::direct_by_hdl_': class 'std::unordered_map<caf::io::connection_handle,caf::node_id,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::node_id>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(75): message : 'std::unordered_map<caf::io::connection_handle,caf::node_id,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::node_id>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(76,50): warning C4251: 'caf::io::basp::routing_table::direct_by_nid_': class 'std::unordered_map<caf::node_id,caf::io::connection_handle,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::connection_handle>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(76): message : 'std::unordered_map<caf::node_id,caf::io::connection_handle,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::connection_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(77,44): warning C4251: 'caf::io::basp::routing_table::indirect_': class 'std::unordered_map<caf::node_id,caf::io::basp::routing_table::node_id_set,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::basp::routing_table::node_id_set>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(77): message : 'std::unordered_map<caf::node_id,caf::io::basp::routing_table::node_id_set,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::basp::routing_table::node_id_set>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker.hpp(38,33): warning C4251: 'caf::detail::abstract_worker::next_': struct 'std::atomic<caf::detail::abstract_worker *>'에서는 class 'caf::detail::abstract_worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(55): message : 'std::atomic<caf::detail::abstract_worker *>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\worker.hpp(93,10): warning C4251: 'caf::io::basp::worker::hdr_': struct 'caf::io::basp::header'에서는 class 'caf::io::basp::worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\fwd.hpp(9): message : 'caf::io::basp::header' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\worker.hpp(96,15): warning C4251: 'caf::io::basp::worker::payload_': class 'std::vector<caf::byte,std::allocator<caf::byte>>'에서는 class 'caf::io::basp::worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\fwd.hpp(192): message : 'std::vector<caf::byte,std::allocator<caf::byte>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\instance.hpp(219,23): warning C4251: 'caf::io::basp::instance::published_actors_': class 'std::unordered_map<uint16_t,caf::io::basp::instance::published_actor,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::basp::instance::published_actor>>>'에서는 class 'caf::io::basp::instance'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\instance.hpp(157): message : 'std::unordered_map<uint16_t,caf::io::basp::instance::published_actor,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::basp::instance::published_actor>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\instance.hpp(223,30): warning C4251: 'caf::io::basp::instance::hub_': class 'caf::detail::worker_hub<caf::io::basp::worker>'에서는 class 'caf::io::basp::instance'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\worker.hpp(39): message : 'caf::detail::worker_hub<caf::io::basp::worker>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(130,11): warning C4251: 'caf::io::basp_broker::ctx': class 'std::unordered_map<caf::io::connection_handle,caf::io::basp::endpoint_context,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::basp::endpoint_context>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(38): message : 'std::unordered_map<caf::io::connection_handle,caf::io::basp::endpoint_context,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::basp::endpoint_context>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(138,38): warning C4251: 'caf::io::basp_broker::spawn_servers': class 'std::unordered_map<caf::node_id,caf::actor,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::actor>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(138): message : 'std::unordered_map<caf::node_id,caf::actor,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::actor>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(142,56): warning C4251: 'caf::io::basp_broker::node_observers': class 'std::unordered_map<caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(142): message : 'std::unordered_map<caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(154,23): warning C4251: 'caf::io::basp_broker::monitored_actors': class 'std::unordered_map<caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>,std::hash<caf::actor_addr>,std::equal_to<caf::actor_addr>,std::allocator<std::pair<const caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(41): message : 'std::unordered_map<caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>,std::hash<caf::actor_addr>,std::equal_to<caf::actor_addr>,std::allocator<std::pair<const caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(339,14): warning C4251: 'caf::io::network::test_multiplexer::mx_': class 'std::mutex'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(87): message : 'std::mutex' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(340,27): warning C4251: 'caf::io::network::test_multiplexer::cv_': class 'std::condition_variable'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex(583): message : 'std::condition_variable' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(341,28): warning C4251: 'caf::io::network::test_multiplexer::resumables_': class 'std::list<caf::io::network::test_multiplexer::resumable_ptr,std::allocator<caf::io::network::test_multiplexer::resumable_ptr>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(341): message : 'std::list<caf::io::network::test_multiplexer::resumable_ptr,std::allocator<caf::io::network::test_multiplexer::resumable_ptr>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(342,23): warning C4251: 'caf::io::network::test_multiplexer::scribes_': class 'std::map<std::pair<std::string,uint16_t>,caf::io::connection_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::connection_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(195): message : 'std::map<std::pair<std::string,uint16_t>,caf::io::connection_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::connection_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(343,23): warning C4251: 'caf::io::network::test_multiplexer::doormen_': class 'std::unordered_map<uint16_t,caf::io::accept_handle,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::accept_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(198): message : 'std::unordered_map<uint16_t,caf::io::accept_handle,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::accept_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(344,19): warning C4251: 'caf::io::network::test_multiplexer::scribe_data_': class 'std::unordered_map<caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(331): message : 'std::unordered_map<caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(345,20): warning C4251: 'caf::io::network::test_multiplexer::doorman_data_': class 'std::unordered_map<caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(333): message : 'std::unordered_map<caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(346,40): warning C4251: 'caf::io::network::test_multiplexer::local_endpoints_': class 'std::map<uint16_t,caf::io::datagram_handle,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const uint16_t,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(200): message : 'std::map<uint16_t,caf::io::datagram_handle,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const uint16_t,caf::io::datagram_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(347,41): warning C4251: 'caf::io::network::test_multiplexer::remote_endpoints_': class 'std::map<std::pair<std::string,uint16_t>,caf::io::datagram_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(204): message : 'std::map<std::pair<std::string,uint16_t>,caf::io::datagram_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::datagram_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(348,24): warning C4251: 'caf::io::network::test_multiplexer::pending_connects_': class 'std::unordered_multimap<caf::io::accept_handle,caf::io::connection_handle,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::connection_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(186): message : 'std::unordered_multimap<caf::io::accept_handle,caf::io::connection_handle,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::connection_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(349,25): warning C4251: 'caf::io::network::test_multiplexer::pending_endpoints_': class 'std::unordered_map<int64_t,caf::io::datagram_handle,std::hash<int64_t>,std::equal_to<int64_t>,std::allocator<std::pair<const int64_t,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(191): message : 'std::unordered_map<int64_t,caf::io::datagram_handle,std::hash<int64_t>,std::equal_to<int64_t>,std::allocator<std::pair<const int64_t,caf::io::datagram_handle>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(350,21): warning C4251: 'caf::io::network::test_multiplexer::datagram_data_': class 'std::unordered_map<caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(335): message : 'std::unordered_map<caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>>>>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(356,25): warning C4251: 'caf::io::network::test_multiplexer::inline_runnable_callback_': class 'std::function<void (void)>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\timeout_definition.hpp(20): message : 'std::function<void (void)>' 선언을 참조하십시오.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stateful_actor.hpp(75,9): warning C4996: 'caf::stateful_actor<ClientInfo,caf::event_based_actor>::non_static_name_member': non-static 'State::name' members have no effect since 0.18
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stateful_actor.hpp(67): message : 클래스 템플릿 멤버 함수 'const char *caf::stateful_actor<ClientInfo,caf::event_based_actor>::name(void) const'을(를) 컴파일하는 중입니다.
       D:\GitHub\WeizenbierGame\TestClient\TestClient.cpp(69): message : 컴파일되는 클래스 템플릿 인스턴스화 'caf::stateful_actor<ClientInfo,caf::event_based_actor>'에 대한 참조를 확인하세요.
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\exec_main.hpp(114,10): warning C4996: 'caf::exec_main': override config_file_path in the config class instead
       D:\GitHub\WeizenbierGame\TestClient\TestClient.cpp(324): message : 컴파일되는 함수 템플릿 인스턴스화 'int caf::exec_main<caf::id_block::test_client,caf::io::middleman,void(__cdecl *)(caf::actor_system &,const config &)>(F,int,char **)'에 대한 참조를 확인하세요.
                 with
                 [
                     F=void (__cdecl *)(caf::actor_system &,const config &)
                 ]
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\exec_main.hpp(81,21): warning C4996: 'caf::actor_system_config::parse': set the config_file_path member instead
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\exec_main.hpp(112): message : 컴파일되는 함수 템플릿 인스턴스화 'int caf::exec_main<caf::id_block::test_client,caf::io::middleman,void(__cdecl *)(caf::actor_system &,const config &)>(F,int,char **,const char *)'에 대한 참조를 확인하세요.
                 with
                 [
                     F=void (__cdecl *)(caf::actor_system &,const config &)
                 ]
       D:\GitHub\WeizenbierGame\TestClient\TestClient.cpp(324): message : 컴파일되는 함수 템플릿 인스턴스화 'int caf::exec_main<caf::id_block::test_client,caf::io::middleman,void(__cdecl *)(caf::actor_system &,const config &)>(F,int,char **)'에 대한 참조를 확인하세요.
                 with
                 [
                     F=void (__cdecl *)(caf::actor_system &,const config &)
                 ]
     1>D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\expected.hpp(51,35): warning C4244: '초기화 중': '__int64'에서 'T'(으)로 변환하면서 데이터가 손실될 수 있습니다.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value.hpp(365): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::expected<uint16_t>::expected<T>(U,void *)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=caf::config_value::integer,
                     U=caf::config_value::integer
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value.hpp(365): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::expected<uint16_t>::expected<T>(U,void *)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=caf::config_value::integer,
                     U=caf::config_value::integer
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value.hpp(495): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::expected<uint16_t> caf::get_as<T>(const caf::config_value &,caf::inspector_access_type::builtin)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\make_config_option.hpp(22): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::expected<uint16_t> caf::get_as<T>(const caf::config_value &)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\make_config_option.hpp(46): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::error caf::detail::sync_impl<T>(void *,caf::config_value &)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\make_config_option.hpp(65): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::config_option::meta_state *caf::detail::option_meta_state_instance<T>(void)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option_adder.hpp(27): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::config_option caf::make_config_option<T>(T &,caf::string_view,caf::string_view,caf::string_view)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       D:\GitHub\WeizenbierGame\TestClient\TestClient.cpp(245): message : 컴파일되는 함수 템플릿 인스턴스화 'caf::config_option_adder &caf::config_option_adder::add<uint16_t>(T &,caf::string_view,caf::string_view)'에 대한 참조를 확인하세요.
                 with
                 [
                     T=uint16_t
                 ]
       "CL" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ClCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "RunSelectedFileNativeCodeAnalysis" 대상을 건너뜁니다. ('$(RunMsvcAnalysis)'=='true' and '$(SelectedFiles)'!='')이(가) ('false'=='true' and ''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "ManagedIncrementalBuildPostProcessDependencyGraph" 대상을 건너뜁니다. ('@(ClCompile)' != '' and '$(EnableManagedIncrementalBuild)' == 'True')이(가) ('TestClient.cpp' != '' and 'false' == 'True')(으)로 확인되었습니다.
       조건이 잘못되어 "NoAnalysisToolEnabledWarning" 대상을 건너뜁니다. ('$(RunCppAnalysis)'=='true' AND '$(EnableMicrosoftCodeAnalysis)'=='false' AND '$(EnableClangTidyCodeAnalysis)'=='false')이(가) ('false'=='true' AND 'true'=='false' AND 'false'=='false')(으)로 확인되었습니다.
       조건이 잘못되어 "RunSelectedFileClangTidy" 대상을 건너뜁니다. ('$(RunClangCppAnalysis)'=='true' AND '$(SelectedFiles)'!='')이(가) ('false'=='true' AND ''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "MicrosoftAnalysisIncompatiableWithClangCl" 대상을 건너뜁니다. ('$(RunCppAnalysis)'=='true' AND '$(EnableMicrosoftCodeAnalysis)'=='true' AND '$(UseClangCl)'=='true')이(가) ('false'=='true' AND 'true'=='true' AND ''=='true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterClCompile" 대상("_ClCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterClCompile" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_ClCompile" 대상("_BuildCompileAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_ClCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "_ResGen" 대상을 건너뜁니다. ('@(EmbeddedResource)'!='')이(가) (''!='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "BeforeResourceCompile" 대상("_ResourceCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeResourceCompile" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForResourceCompile" 대상("_ResourceCompile" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForResourceCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "ResourceCompile" 대상을 건너뜁니다. ('@(ResourceCompile)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterResourceCompile" 대상("_ResourceCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterResourceCompile" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_ResourceCompile" 대상("_BuildCompileAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_ResourceCompile" 대상을 빌드했습니다.
       조건이 잘못되어 "_ImpLib" 대상을 건너뜁니다. ('$(ImpLibCompiled)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "_Lib" 대상을 건너뜁니다. ('$(LibCompiled)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterBuildCompileEvent" 대상("_BuildCompileAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterBuildCompileEvent" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_BuildCompileAction" 대상("BuildCompile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_BuildCompileAction" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildCompile" 대상("Build" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BuildCompile" 대상을 빌드했습니다.
       "PrepareProjectReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildLinkTraverse" 대상("BuildLink" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('$(BuildPassReferences)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''  and '%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true')이(가) ('' == 'true' and '' != '' and '' != ''  and '' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "BuildLinkTraverse" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeLegacyManifestEmbedding" 대상("_BuildLinkAction" 대상이 종속됨):
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(RevertManifestEmbedding)' == 'true' and '$(_LegacyManifestEmbeddingDebug)' == 'true')이(가) ('' == 'true' and '' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ComputeLegacyManifestEmbedding" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "BeforeLink" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BeforeLink" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeRCOutputs" 대상("ComputeRCGeneratedLinkInputs" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeRCOutputs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeRCGeneratedLinkInputs" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeRCGeneratedLinkInputs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeManifestGeneratedLinkerInputs" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeManifestGeneratedLinkerInputs" 대상을 빌드했습니다.
       "ComputeCustomBuildOutput" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "GenerateTargetFrameworkMonikerAttribute" 대상을 건너뜁니다. ('$(GenerateTargetFrameworkAttribute)' == 'true')이(가) ('false' == 'true')(으)로 확인되었습니다.
       "ComputeMIDLGeneratedCompileInputs" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ComputeCLInputPDBName" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ComputeReferenceCLInput" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "WarnCompileDuplicatedFilename" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "FixupCLCompileOptions" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCLOutputs" 대상("ComputeCLGeneratedLinkInputs" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCLOutputs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCLGeneratedLinkInputs" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCLGeneratedLinkInputs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeLinkInputsFromProject" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeLinkInputsFromProject" 대상을 빌드했습니다.
       조건이 잘못되어 "ComputeReferenceLinkInputs" 대상을 건너뜁니다. (@(ProjectReference) != '')이(가) ( != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeManifestInputsTargets" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeManifestInputsTargets" 대상을 빌드했습니다.
       조건이 잘못되어 "ManifestResourceCompile" 대상을 건너뜁니다. ('$(EmbedManifestBy)' == 'LINK' and '@(Manifest)' != '')이(가) ('LINK' == 'LINK' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "AssignWinFXEmbeddedResource" 대상을 건너뜁니다. ('@(WinFXEmbeddedResource)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "AssignTargetPaths" 대상("PrepareResourceNames" 대상이 종속됨):
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
       조건이 잘못되어 "AssignTargetPath" 작업을 건너뜁니다. ('@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest')이(가) (''=='' and ''=='.manifest')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "AssignTargetPaths" 대상을 빌드했습니다.
       "AssignTargetPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "SplitResourcesByCulture" 대상("PrepareResourceNames" 대상이 종속됨):
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(ResxWithNoCulture)'!='')이(가) (''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(ResxWithCulture)'!='')이(가) (''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(NonResxWithCulture)'!='')이(가) (''!='')(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(NonResxWithNoCulture)'!='')이(가) (''!='')(으)로 확인되었습니다.
       "AssignCulture" 작업
       "AssignCulture" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "SplitResourcesByCulture" 대상을 빌드했습니다.
       조건이 잘못되어 "CreateManifestResourceNames" 대상을 건너뜁니다. ('@(EmbeddedResource)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CreateCustomManifestResourceNames" 대상("PrepareResourceNames" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "CreateCustomManifestResourceNames" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "PrepareResourceNames" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "PrepareResourceNames" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForLink" 대상("_Link" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForLink" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "DoLinkOutputFilesMatch" 대상("_Link" 대상이 종속됨):
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('@(_OutputFileFromLink)' == '')이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe' == '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('@(_OutputFileFromLink)' != '' and '%(_OutputFileFromLink.FullPath)' != '$([System.IO.Path]::GetFullPath($(TargetPath)))')이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe' != '' and 'D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe' != 'D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('@(_OutputFileFromLink)' != '' and '%(_OutputFileFromLink.Extension)' != '' and '%(_OutputFileFromLink.Extension)' != '$(TargetExt)')이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe' != '' and '.exe' != '' and '.exe' != '.exe')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('@(_OutputFileFromLink)' != '' and '%(_OutputFileFromLink.Filename)' != '' and '%(_OutputFileFromLink.Filename)' != '$(TargetName)')이(가) ('D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe' != '' and 'TestClient' != '' and 'TestClient' != 'TestClient')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('%(Link.MinimumRequiredVersion)' != '' and ('%(Link.Subsystem)' == '' or '%(Link.Subsystem)' == 'NotSet'))이(가) ('' != '' and ('Console' == '' or 'Console' == 'NotSet'))(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "DoLinkOutputFilesMatch" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "PreLinkEvent" 대상("_Link" 대상이 종속됨):
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('%(PreLinkEvent.Message)' != '' and '%(PreLinkEvent.Command)' != '')이(가) ('' != '' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('%(PreLinkEvent.Command)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "PreLinkEvent" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "ComputeLinkSwitches" 대상("Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeLinkSwitches" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "Link" 대상("_Link" 대상이 종속됨):
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "Link" 작업을 사용합니다.
       "Link" 작업
         도구로 전달된 환경 변수:
           VS_UNICODE_OUTPUT=2260
         C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\link.exe /ERRORREPORT:PROMPT /OUT:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe" /INCREMENTAL /ILK:"x64\Debug\TestClient.ilk" /NOLOGO /LIBPATH:"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib" /LIBPATH:"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib\manual-link" ..\caf\libcaf_core\Debug\caf_core.lib ..\caf\libcaf_io\Debug\caf_io.lib ws2_32.lib ..\x64\Debug\CommonType.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib\*.lib" /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.lib" /MACHINE:X64 x64\Debug\TestClient.obj
         추적 명령:
         C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Tracker.exe /a /d "C:\Program Files (x86)\MSBuild\15.0\FileTracker\FileTracker32.dll" /i D:\GitHub\WeizenbierGame\TestClient\x64\Debug\TestClient.tlog /r D:\GITHUB\WEIZENBIERGAME\TESTCLIENT\X64\DEBUG\TESTCLIENT.OBJ /b MSBuildConsole_CancelEvent0c05f7bc20594945b583e025bd5d46a5  /c "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\bin\HostX86\x64\link.exe"  /ERRORREPORT:PROMPT /OUT:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe" /INCREMENTAL /ILK:"x64\Debug\TestClient.ilk" /NOLOGO /LIBPATH:"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib" /LIBPATH:"C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib\manual-link" ..\caf\libcaf_core\Debug\caf_core.lib ..\caf\libcaf_io\Debug\caf_io.lib ws2_32.lib ..\x64\Debug\CommonType.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\lib\*.lib" /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"D:\GitHub\WeizenbierGame\x64\Debug\TestClient.lib" /MACHINE:X64 x64\Debug\TestClient.obj
       "Link" 작업을 실행했습니다.
       "Message" 작업
         TestClient.vcxproj -> D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe
       "Message" 작업을 실행했습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. (('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
                    %(Link.GenerateDebugInformation) == 'DebugFastLink' and %(Link.ProgramDataBaseFileName) != '')이(가) (('LINK' != 'LINK' or '' != 'true' or 'False' == 'true') and
                    true == 'DebugFastLink' and  != '')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. (('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
                    %(Link.GenerateDebugInformation) == 'true' and %(Link.ProgramDataBaseFileName) != '')이(가) (('LINK' != 'LINK' or '' != 'true' or 'False' == 'true') and
                    true == 'true' and  != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "Link" 대상을 빌드했습니다.
       조건이 잘못되어 "MetaGenInputsOutputs" 대상을 건너뜁니다. ('$(EnableManagedIncrementalBuild)' == 'True')이(가) ('false' == 'True')(으)로 확인되었습니다.
       조건이 잘못되어 "ComputeMetaGenInputs" 대상을 건너뜁니다. ('$(CLRSupport)'!='' and '$(CLRSupport)'!='false' and '$(CLRSupport)'!='NetCore')이(가) ('false'!='' and 'false'!='false' and 'false'!='NetCore')(으)로 확인되었습니다.
       조건이 잘못되어 "MetaGen" 대상을 건너뜁니다. ('@(MetaGen)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeLinkImportLibraryOutputsForClean" 대상("_Link" 대상이 종속됨):
       조건이 잘못되어 "WriteLinesToFile" 작업을 건너뜁니다. ('@(_LinkSecondaryOutput)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ComputeLinkImportLibraryOutputsForClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "AfterLink" 대상("_Link" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterLink" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Link" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_Link" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_ALink" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_ALink" 대상을 빌드했습니다.
       "ComputeLegacyManifestEmbedding" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Manifest" 대상("_BuildLinkAction" 대상이 종속됨):
       조건이 잘못되어 "CallTarget" 작업을 건너뜁니다. ('$(LegacyManifestEmbedding)' == 'true')이(가) ('' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_Manifest" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\src\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets" 파일에 있는 "AppLocalFromInstalled" 대상("RegisterOutput" 대상이 종속됨):
       "Message" 작업
         [vcpkg] Starting VcpkgApplocalDeps
       "Message" 작업을 실행했습니다.
       "Exec" 작업
         pwsh.exe -ExecutionPolicy Bypass -noprofile -File "C:\src\vcpkg\scripts\buildsystems\msbuild\applocal.ps1" "D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe" "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\bin" "x64\Debug\TestClient.tlog\TestClient.write.1u.tlog" "x64\Debug\vcpkg.applocal.log"
         'pwsh.exe'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는
         배치 파일이 아닙니다.
         "pwsh.exe -ExecutionPolicy Bypass -noprofile -File "C:\src\vcpkg\scripts\buildsystems\msbuild\applocal.ps1" "D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe" "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\bin" "x64\Debug\TestClient.tlog\TestClient.write.1u.tlog" "x64\Debug\vcpkg.applocal.log"" 명령이 종료되었습니다(코드: 9009).
       "Exec" 작업을 실행했습니다.
       "Message" 작업
         [vcpkg] Failed to run applocal.ps1 using pwsh, falling back to system PowerShell.
       "Message" 작업을 실행했습니다.
       "Exec" 작업
         "C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe" -ExecutionPolicy Bypass -noprofile -File "C:\src\vcpkg\scripts\buildsystems\msbuild\applocal.ps1" "D:\GitHub\WeizenbierGame\x64\Debug\TestClient.exe" "C:\src\vcpkg\scripts\buildsystems\msbuild\..\..\..\installed\x64-windows\debug\bin" "x64\Debug\TestClient.tlog\TestClient.write.1u.tlog" "x64\Debug\vcpkg.applocal.log"
       "Exec" 작업을 실행했습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ($(_VcpkgAppLocalExitCode) != 0)이(가) (0 != 0)(으)로 확인되었습니다.
       "ReadLinesFromFile" 작업
       "ReadLinesFromFile" 작업을 실행했습니다.
       "Message" 작업
       "Message" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "AppLocalFromInstalled" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "RegisterOutput" 대상("_BuildLinkAction" 대상이 종속됨):
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('$(ConfigurationType)'=='DynamicLibrary' and '%(Link.RegisterOutput)'=='true' and '%(Link.PerUserRedirection)'!='true')이(가) ('Application'=='DynamicLibrary' and 'false'=='true' and 'false'!='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('$(ConfigurationType)'=='DynamicLibrary' and '%(Link.RegisterOutput)'=='true' and '%(Link.PerUserRedirection)'=='true')이(가) ('Application'=='DynamicLibrary' and 'false'=='true' and 'false'=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('$(ConfigurationType)'=='Application' and '%(Link.RegisterOutput)'=='true' and '%(Link.PerUserRedirection)'!='true')이(가) ('Application'=='Application' and 'false'=='true' and 'false'!='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('$(ConfigurationType)'=='Application' and '%(Link.RegisterOutput)'=='true' and '%(Link.PerUserRedirection)'=='true')이(가) ('Application'=='Application' and 'false'=='true' and 'false'=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "VCMessage" 작업을 건너뜁니다. ('$(_RegisterOutputExitCode)' != '' and '$(_RegisterOutputExitCode)' != '0')이(가) ('' != '' and '' != '0')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "RegisterOutput" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "ResolveReferences" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ResolvedXDCMake" 대상("_XdcMake" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != '' and '$(_ClCompileGenerateXMLDocumentationFiles)' == 'true')이(가) ('' == '.vcxproj' and '' != '' and '' != '' and '' == 'true')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ResolvedXDCMake" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCLCompileGeneratedXDCFiles" 대상("_XdcMake" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCLCompileGeneratedXDCFiles" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForXdcMake" 대상("_XdcMake" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForXdcMake" 대상을 빌드했습니다.
       조건이 잘못되어 "XdcMake" 대상을 건너뜁니다. ('@(XdcMake)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_XdcMake" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_XdcMake" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ComputeCLCompileGeneratedSbrFiles" 대상("_BscMake" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "ComputeCLCompileGeneratedSbrFiles" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForBscMake" 대상("_BscMake" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForBscMake" 대상을 빌드했습니다.
       조건이 잘못되어 "BscMake" 대상을 건너뜁니다. ('@(BscMake)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "CustomBuildStep" 대상을 건너뜁니다. ('@(CustomBuildStep)' != '' and '$(SelectedFiles)'=='')이(가) ('' != '' and ''=='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_BscMake" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_BscMake" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "BuiltProjectOutputGroup" 대상("CreateRecipeFile" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BuiltProjectOutputGroup" 대상을 빌드했습니다.
       "PrepareResourceNames" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.WinFx.targets" 파일에 있는 "SatelliteDllsProjectOutputGroup" 대상("CreateRecipeFile" 대상이 종속됨):
       조건이 잘못되어 "CreateItem" 작업을 건너뜁니다. ('@(ResxWithCulture)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "CreateItem" 작업을 건너뜁니다. ('$(UICulture)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "CreateItem" 작업을 건너뜁니다. ('@(NonResxWithCulture)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       "CreateItem" 작업
       "CreateItem" 작업을 실행했습니다.
       "CreateItem" 작업
       "CreateItem" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "SatelliteDllsProjectOutputGroup" 대상을 빌드했습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "AssignTargetPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "PrepareForBuild" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "AssignTargetPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "MakeDirsForFxc" 대상("ContentFilesProjectOutputGroup" 대상이 종속됨):
       "MakeDir" 작업
       "MakeDir" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "MakeDirsForFxc" 대상을 빌드했습니다.
       조건이 잘못되어 "_CreateCopyFileItems" 대상을 건너뜁니다. ('@(CopyFileToFolders)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "ContentFilesProjectOutputGroup" 대상("CreateRecipeFile" 대상이 종속됨):
       조건이 잘못되어 "AssignTargetPath" 작업을 건너뜁니다. ('@(ContentFilesProjectOutputGroupOutputFullPath)' != '' and '%(ContentFilesProjectOutputGroupOutputFullPath.RootFolder)' != '')이(가) ('' != '' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "AssignTargetPath" 작업을 건너뜁니다. ('@(ContentFilesProjectOutputGroupOutputFullPath)' != '' and '%(ContentFilesProjectOutputGroupOutputFullPath.RootFolder)' == '')이(가) ('' != '' and '' == '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "ContentFilesProjectOutputGroup" 대상을 빌드했습니다.
       "GetReferencedVCProjectsInfo" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "CreateRecipeFile" 대상("_BuildLinkAction" 대상이 종속됨):
       "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.Build.CppTasks.Common.dll" 어셈블리에서 "GenerateDesktopDeployRecipe" 작업을 사용합니다.
       "GenerateDesktopDeployRecipe" 작업
       "GenerateDesktopDeployRecipe" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CreateRecipeFile" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_GenerateSatelliteAssemblyInputs" 대상("CreateSatelliteAssemblies" 대상이 종속됨):
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(ManifestResourceWithCulture)'!='' and '%(ManifestResourceWithCulture.EmittedForCompatibilityOnly)'=='')이(가) (''!='' and ''=='')(으)로 확인되었습니다.
       조건이 잘못되어 "Warning" 작업을 건너뜁니다. ('@(ManifestNonResxWithCultureOnDisk)'!='' and '%(ManifestNonResxWithCultureOnDisk.EmittedForCompatibilityOnly)'=='')이(가) (''!='' and ''=='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_GenerateSatelliteAssemblyInputs" 대상을 빌드했습니다.
       조건이 잘못되어 "ComputeIntermediateSatelliteAssemblies" 대상을 건너뜁니다. (@(ReferenceSatellitePaths->'%(DestinationSubDirectory)') != '')이(가) ( != '')(으)로 확인되었습니다.
       조건이 잘못되어 "GenerateSatelliteAssemblies" 대상을 건너뜁니다. ('@(_SatelliteAssemblyResourceInputs)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CreateSatelliteAssemblies" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "CreateSatelliteAssemblies" 대상을 빌드했습니다.
       조건이 잘못되어 "CopyLocalNativeReference" 대상을 건너뜁니다. ('$(CopyLocalProjectReference)' == 'true')이(가) ('false' == 'true')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Appverifier" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_Appverifier" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_Deploy" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_Deploy" 대상을 빌드했습니다.
       조건이 잘못되어 "ComputeIntermediateSatelliteAssemblies" 대상을 건너뜁니다. (@(ReferenceSatellitePaths->'%(DestinationSubDirectory)') != '')이(가) ( != '')(으)로 확인되었습니다.
       조건이 잘못되어 "_CopyFilesMarkedCopyLocal" 대상을 건너뜁니다. ('@(ReferenceCopyLocalPaths)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       "AssignTargetPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "_SplitProjectReferencesByFileExistence" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "_GetProjectReferenceTargetFrameworkProperties" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_PopulateCommonStateForGetCopyToOutputDirectoryItems" 대상("GetCopyToOutputDirectoryItems" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_PopulateCommonStateForGetCopyToOutputDirectoryItems" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Xaml.targets" 파일에 있는 "GetCopyToOutputDirectoryXamlAppDefs" 대상("GetCopyToOutputDirectoryItems" 대상이 종속됨):
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "GetCopyToOutputDirectoryXamlAppDefs" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "GetCopyToOutputDirectoryItems" 대상("_CopySourceItemsToOutputDirectory" 대상이 종속됨):
       "CallTarget" 작업
       "_PopulateCommonStateForGetCopyToOutputDirectoryItems" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "_AddOutputPathToGlobalPropertiesToRemove" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences" 대상("GetCopyToOutputDirectoryItems" 대상이 종속됨):
       조건이 잘못되어 "MSBuild" 작업을 건너뜁니다. ('@(_MSBuildProjectReferenceExistent)' != '' and '$(_GetChildProjectCopyToOutputDirectoryItems)' == 'true' and '%(_MSBuildProjectReferenceExistent.Private)' != 'false' and '$(UseCommonOutputDirectory)' != 'true')이(가) ('' != '' and 'true' == 'true' and '' != 'false' and 'false' != 'true')(으)로 확인되었습니다.
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences" 대상을 빌드했습니다.
       "CallTarget" 작업을 실행했습니다.
       "CallTarget" 작업
       "AssignTargetPaths" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       "_PopulateCommonStateForGetCopyToOutputDirectoryItems" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_GetCopyToOutputDirectoryItemsFromThisProject" 대상("GetCopyToOutputDirectoryItems" 대상이 종속됨):
       "AssignTargetPath" 작업
       "AssignTargetPath" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_GetCopyToOutputDirectoryItemsFromThisProject" 대상을 빌드했습니다.
       "CallTarget" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "GetCopyToOutputDirectoryItems" 대상을 빌드했습니다.
       조건이 잘못되어 "_CopyOutOfDateSourceItemsToOutputDirectory" 대상을 건너뜁니다. ( '@(_SourceItemsToCopyToOutputDirectory)' != '' )이(가) ( '' != '' )(으)로 확인되었습니다.
       조건이 잘못되어 "_CopyOutOfDateSourceItemsToOutputDirectoryAlways" 대상을 건너뜁니다. ( '@(_SourceItemsToCopyToOutputDirectoryAlways)' != '' )이(가) ( '' != '' )(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_CopySourceItemsToOutputDirectory" 대상("CopyFilesToOutputDirectory" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_CopySourceItemsToOutputDirectory" 대상을 빌드했습니다.
       조건이 잘못되어 "_CopyAppConfigFile" 대상을 건너뜁니다. ( '@(AppConfigWithTargetPath)' != '' )이(가) ( '' != '' )(으)로 확인되었습니다.
       조건이 잘못되어 "_CopyManifestFiles" 대상을 건너뜁니다. ( '$(_DeploymentCopyApplicationManifest)'=='true' or '$(GenerateClickOnceManifests)'=='true' )이(가) ( ''=='true' or ''=='true' )(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_CheckForCompileOutputs" 대상("CopyFilesToOutputDirectory" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_CheckForCompileOutputs" 대상을 빌드했습니다.
       조건이 잘못되어 "_SGenCheckForOutputs" 대상을 건너뜁니다. ('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))이(가) ('Off' == 'On' or (''!='' and 'Off' == 'Auto'))(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "CopyFilesToOutputDirectory" 대상("PrepareForRun" 대상이 종속됨):
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')이(가) ('true' == 'true' and 'true' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "CopyRefAssembly" 작업을 건너뜁니다. ('$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true')이(가) ('false' == 'true' and 'true' == 'true' and 'true' != 'true')(으)로 확인되었습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true')이(가) ('true' == 'true' and 'true'!='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('@(AddModules)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('$(_SGenDllCreated)'=='true')이(가) ('false'=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true')이(가) ('false'=='true' and '' != 'true' and 'true'=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true')이(가) ('false'=='true' and 'true'=='true')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('@(IntermediateSatelliteAssembliesWithTargetPath)' != '')이(가) ('' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' )이(가) ('' != '' or '' != '' or '' != '' or '' != '' )(으)로 확인되었습니다.
       조건이 잘못되어 "Copy" 작업을 건너뜁니다. ('$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != '')이(가) ('' != 'true' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != '')이(가) ('' != 'true' and '' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "CopyFilesToOutputDirectory" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "PrepareForRun" 대상("_BuildLinkAction" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "PrepareForRun" 대상을 빌드했습니다.
       조건이 잘못되어 "CustomBuildStep" 대상을 건너뜁니다. ('@(CustomBuildStep)' != '' and '$(SelectedFiles)'=='')이(가) ('' != '' and ''=='')(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets" 파일에 있는 "PostBuildEvent" 대상("_BuildLinkAction" 대상이 종속됨):
       조건이 잘못되어 "Message" 작업을 건너뜁니다. ('%(PostBuildEvent.Message)' != '' and '%(PostBuildEvent.Command)' != '')이(가) ('' != '' and '' != '')(으)로 확인되었습니다.
       조건이 잘못되어 "Exec" 작업을 건너뜁니다. ('%(PostBuildEvent.Command)' != '')이(가) ('' != '')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "PostBuildEvent" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "_BuildLinkAction" 대상("BuildLink" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "_BuildLinkAction" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "BuildLink" 대상("Build" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "BuildLink" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "AfterBuild" 대상("Build" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterBuild" 대상을 빌드했습니다.
       "_CheckForCompileOutputs" 대상을 건너뜁니다. 이전에 빌드되었습니다.
       조건이 잘못되어 "_SGenCheckForOutputs" 대상을 건너뜁니다. ('$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'))이(가) ('Off' == 'On' or (''!='' and 'Off' == 'Auto'))(으)로 확인되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "_CleanGetCurrentAndPriorFileWrites" 대상("IncrementalClean" 대상이 종속됨):
       "ReadLinesFromFile" 작업
       "ReadLinesFromFile" 작업을 실행했습니다.
       "ConvertToAbsolutePath" 작업
       "ConvertToAbsolutePath" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "D:\GitHub\WeizenbierGame\TestClient"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "D:\GitHub\WeizenbierGame\x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "RemoveDuplicates" 작업
       "RemoveDuplicates" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "_CleanGetCurrentAndPriorFileWrites" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "IncrementalClean" 대상("Build" 대상이 종속됨):
       "FindUnderPath" 작업
         비교 경로는 "D:\GitHub\WeizenbierGame\x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "FindUnderPath" 작업
         비교 경로는 "x64\Debug\"입니다.
       "FindUnderPath" 작업을 실행했습니다.
       "Delete" 작업
       "Delete" 작업을 실행했습니다.
       "RemoveDuplicates" 작업
       "RemoveDuplicates" 작업을 실행했습니다.
       조건이 잘못되어 "WriteLinesToFile" 작업을 건너뜁니다. ('@(_CleanUnfilteredPriorFileWrites)'!='@(_CleanUniqueRemainingFileWritesAfterIncrementalClean)')이(가) (''!='')(으)로 확인되었습니다.
     1>"TestClient.vcxproj" 프로젝트에 "IncrementalClean" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.CppBuild.targets" 파일에 있는 "FinalizeBuildStatus" 대상("Build" 대상이 종속됨):
       "Delete" 작업
         "x64\Debug\TestClient.tlog\unsuccessfulbuild" 파일을 삭제하고 있습니다.
       "Delete" 작업을 실행했습니다.
       "Touch" 작업
         "x64\Debug\TestClient.tlog\TestClient.lastbuildstate"에 연결(touching)하고 있습니다.
       "Touch" 작업을 실행했습니다.
     1>"TestClient.vcxproj" 프로젝트에 "FinalizeBuildStatus" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "Build" 대상("Rebuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "Build" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\Microsoft.Common.CurrentVersion.targets" 파일에 있는 "AfterRebuild" 대상("Rebuild" 대상이 종속됨):
     1>"TestClient.vcxproj" 프로젝트에 "AfterRebuild" 대상을 빌드했습니다.
       "_CheckForInvalidConfigurationAndPlatform" 대상을 건너뜁니다. 이전에 빌드되었습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트의 "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Microsoft\VC\v160\Microsoft.BuildSteps.Targets" 파일에 있는 "Rebuild" 대상(진입점):
     1>"TestClient.vcxproj" 프로젝트에 "Rebuild" 대상을 빌드했습니다.
     1>"D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj" 프로젝트를 빌드했습니다(Rebuild 대상).

빌드했습니다.

       "D:\GitHub\WeizenbierGame\TestClient\TestClient.vcxproj"(Rebuild 대상)(1) ->
       (ClCompile 대상) -> 
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\comparable.hpp(1,1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\message_data.hpp(183,31): warning C4251: 'caf::detail::message_data::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::detail::message_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\message_data.hpp(184,16): warning C4251: 'caf::detail::message_data::types_': class 'caf::type_id_list'에서는 class 'caf::detail::message_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message.hpp(195,12): warning C4251: 'caf::message::data_': class 'caf::intrusive_cow_ptr<caf::detail::message_data>'에서는 class 'caf::message'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\error.hpp(187,25): warning C4251: 'caf::error::data_': class 'std::unique_ptr<caf::error::data,std::default_delete<caf::error::data>>'에서는 class 'caf::error'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_channel.hpp(76,20): warning C4251: 'caf::abstract_channel::flags_': struct 'std::atomic<int>'에서는 class 'caf::abstract_channel'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\attachable.hpp(72,31): warning C4251: 'caf::attachable::next': class 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>'에서는 class 'caf::attachable'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\ref_counted.hpp(45,31): warning C4251: 'caf::ref_counted::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::ref_counted'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(78,17): warning C4251: 'caf::uri::impl_type::str': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(81,17): warning C4251: 'caf::uri::impl_type::scheme': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(84,25): warning C4251: 'caf::uri::impl_type::authority': struct 'caf::uri::authority_type'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(87,17): warning C4251: 'caf::uri::impl_type::path': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(90,20): warning C4251: 'caf::uri::impl_type::query': class 'caf::detail::unordered_flat_map<std::string,std::string,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(93,17): warning C4251: 'caf::uri::impl_type::fragment': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(124,33): warning C4251: 'caf::uri::impl_type::rc_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::uri::impl_type'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\uri.hpp(210,12): warning C4251: 'caf::uri::impl_': class 'caf::intrusive_ptr<caf::uri::impl_type>'에서는 class 'caf::uri'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(108,16): warning C4251: 'caf::node_id_data::content': class 'caf::variant<caf::uri,caf::hashed_node_id>'에서는 class 'caf::node_id_data'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\node_id.hpp(200,31): warning C4251: 'caf::node_id::data_': class 'caf::intrusive_ptr<caf::node_id_data>'에서는 class 'caf::node_id'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_control_block.hpp(71,23): warning C4251: 'caf::actor_control_block::strong_refs': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_control_block'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_control_block.hpp(72,23): warning C4251: 'caf::actor_control_block::weak_refs': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_control_block'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(26,20): warning C4251: 'caf::mailbox_element::sender': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(29,14): warning C4251: 'caf::mailbox_element::mid': class 'caf::message_id'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(33,20): warning C4251: 'caf::mailbox_element::stages': class 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\mailbox_element.hpp(46,41): warning C4251: 'caf::mailbox_element::enqueue_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::mailbox_element'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_actor.hpp(207,22): warning C4251: 'caf::abstract_actor::mtx_': class 'std::mutex'에서는 class 'caf::abstract_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor.hpp(157,20): warning C4251: 'caf::actor::ptr_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_addr.hpp(128,18): warning C4251: 'caf::actor_addr::ptr_': class 'caf::weak_intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_addr'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_group.hpp(76,20): warning C4251: 'caf::abstract_group::parent_': class 'caf::intrusive_ptr<caf::group_module>'에서는 class 'caf::abstract_group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\abstract_group.hpp(78,15): warning C4251: 'caf::abstract_group::identifier_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::abstract_group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_manager.hpp(260,14): warning C4251: 'caf::downstream_manager::last_send_': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::downstream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_msg.hpp(88,16): warning C4251: 'caf::downstream_msg::slots': struct 'caf::stream_slots'에서는 struct 'caf::downstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_msg.hpp(98,16): warning C4251: 'caf::downstream_msg::content': class 'caf::variant<caf::downstream_msg::batch,caf::downstream_msg::close,caf::downstream_msg::forced_close>'에서는 struct 'caf::downstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\shared_spinlock.hpp(33,21): warning C4251: 'caf::detail::shared_spinlock::flag_': struct 'std::atomic<long>'에서는 class 'caf::detail::shared_spinlock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(127,17): warning C4251: 'caf::logger::event::message': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(130,21): warning C4251: 'caf::logger::event::tid': class 'std::thread::id'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(136,15): warning C4251: 'caf::logger::event::tstamp': class 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>'에서는 struct 'caf::logger::event'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(193,17): warning C4251: 'caf::logger::line_builder::str_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::logger::line_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(327,10): warning C4251: 'caf::logger::cfg_': struct 'caf::logger::config'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(331,28): warning C4251: 'caf::logger::global_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(334,28): warning C4251: 'caf::logger::file_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(337,28): warning C4251: 'caf::logger::console_filter_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(343,19): warning C4251: 'caf::logger::parent_thread_': class 'std::thread::id'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(346,13): warning C4251: 'caf::logger::t0_': class 'std::chrono::time_point<std::chrono::system_clock,caf::timespan>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(349,15): warning C4251: 'caf::logger::file_format_': class 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(352,15): warning C4251: 'caf::logger::console_format_': class 'std::vector<caf::logger::field,std::allocator<caf::logger::field>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(355,16): warning C4251: 'caf::logger::file_': class 'std::basic_fstream<char,std::char_traits<char>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(358,41): warning C4251: 'caf::logger::queue_': class 'caf::detail::ringbuffer<caf::logger::event,128>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(361,15): warning C4251: 'caf::logger::file_name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\logger.hpp(364,15): warning C4251: 'caf::logger::thread_': class 'std::thread'에서는 class 'caf::logger'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(164,14): warning C4251: 'caf::config_value_reader::st_': class 'std::stack<caf::config_value_reader::value_type,std::vector<caf::config_value_reader::value_type,std::allocator<caf::config_value_reader::value_type>>>'에서는 class 'caf::config_value_reader'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_reader.hpp(167,46): warning C4251: 'caf::config_value_reader::scratch_space_': class 'std::vector<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>,std::allocator<std::unique_ptr<caf::config_value,std::default_delete<caf::config_value>>>>'에서는 class 'caf::config_value_reader'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value_writer.hpp(126,14): warning C4251: 'caf::config_value_writer::st_': class 'std::stack<caf::config_value_writer::value_type,std::vector<caf::config_value_writer::value_type,std::allocator<caf::config_value_writer::value_type>>>'에서는 class 'caf::config_value_writer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_value.hpp(318,16): warning C4251: 'caf::config_value::data_': class 'caf::variant<caf::none_t,caf::config_value::integer,caf::config_value::boolean,caf::config_value::real,caf::timespan,caf::uri,caf::config_value::string,caf::config_value::list,caf::config_value::dictionary>'에서는 class 'caf::config_value'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\label.hpp(61,15): warning C4251: 'caf::telemetry::label::str_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::label'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\dbl_gauge.hpp(84,23): warning C4251: 'caf::telemetry::dbl_gauge::value_': struct 'std::atomic<double>'에서는 class 'caf::telemetry::dbl_gauge'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\int_gauge.hpp(94,24): warning C4251: 'caf::telemetry::int_gauge::value_': struct 'std::atomic<__int64>'에서는 class 'caf::telemetry::int_gauge'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\upstream_msg.hpp(116,16): warning C4251: 'caf::upstream_msg::slots': struct 'caf::stream_slots'에서는 struct 'caf::upstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\upstream_msg.hpp(126,16): warning C4251: 'caf::upstream_msg::content': class 'caf::variant<caf::upstream_msg::ack_open,caf::upstream_msg::ack_batch,caf::upstream_msg::drop,caf::upstream_msg::forced_drop>'에서는 struct 'caf::upstream_msg'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(86,20): warning C4251: 'caf::inbound_path::hdl': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(89,16): warning C4251: 'caf::inbound_path::slots': struct 'caf::stream_slots'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(119,38): warning C4251: 'caf::inbound_path::controller_': class 'std::unique_ptr<caf::credit_controller,std::default_delete<caf::credit_controller>>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\inbound_path.hpp(122,14): warning C4251: 'caf::inbound_path::last_ack_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::inbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(304,22): warning C4251: 'caf::stream_manager::inbound_paths_': class 'std::vector<caf::inbound_path *,std::allocator<caf::inbound_path *>>'에서는 class 'caf::stream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stream_manager.hpp(317,12): warning C4251: 'caf::stream_manager::max_batch_delay_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::stream_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_module.hpp(55,15): warning C4251: 'caf::group_module::name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group.hpp(153,22): warning C4251: 'caf::group::ptr_': class 'caf::intrusive_ptr<caf::abstract_group>'에서는 class 'caf::group'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\outbound_path.hpp(135,16): warning C4251: 'caf::outbound_path::slots': struct 'caf::stream_slots'에서는 class 'caf::outbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\outbound_path.hpp(138,20): warning C4251: 'caf::outbound_path::hdl': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::outbound_path'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(206,22): warning C4251: 'caf::response_promise::state::source': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(207,22): warning C4251: 'caf::response_promise::state::stages': class 'std::vector<caf::strong_actor_ptr,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(208,16): warning C4251: 'caf::response_promise::state::id': class 'caf::message_id'에서는 class 'caf::response_promise::state'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\response_promise.hpp(222,24): warning C4251: 'caf::response_promise::state_': class 'caf::intrusive_ptr<caf::response_promise::state>'에서는 class 'caf::response_promise'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_impl.hpp(65,12): warning C4251: 'caf::detail::behavior_impl::timeout_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::detail::behavior_impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\behavior.hpp(122,12): warning C4251: 'caf::behavior::impl_': class 'caf::intrusive_ptr<caf::detail::behavior_impl>'에서는 class 'caf::behavior'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_handler.hpp(111,12): warning C4251: 'caf::message_handler::impl_': class 'caf::intrusive_ptr<caf::detail::behavior_impl>'에서는 class 'caf::message_handler'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_config.hpp(36,51): warning C4251: 'caf::actor_config::init_fun': class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>'에서는 class 'caf::actor_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(113,22): warning C4251: 'caf::actor_registry::running_mtx_': class 'std::mutex'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(114,35): warning C4251: 'caf::actor_registry::running_cv_': class 'std::condition_variable'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(117,11): warning C4251: 'caf::actor_registry::entries_': class 'std::unordered_map<caf::actor_id,caf::strong_actor_ptr,std::hash<uint64_t>,std::equal_to<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,caf::strong_actor_ptr>>>'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_registry.hpp(119,12): warning C4251: 'caf::actor_registry::named_entries_': class 'std::unordered_map<std::string,caf::strong_actor_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::strong_actor_ptr>>>'에서는 class 'caf::actor_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(18,61): warning C4275: DLL 인터페이스가 아닌 class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>::wrapper'이(가) DLL 인터페이스 class 'caf::detail::init_fun_factory_helper_base'의 기본으로 사용되었습니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\init_fun_factory.hpp(40,17): warning C4251: 'caf::detail::init_fun_factory_helper_base::hook_': class 'caf::detail::unique_function<void (caf::local_actor *)>'에서는 class 'caf::detail::init_fun_factory_helper_base'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(72,18): warning C4251: 'caf::group_manager::get_remote': class 'std::function<caf::expected<caf::group> (const caf::node_id &,const std::string &,const std::string &)>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(88,15): warning C4251: 'caf::group_manager::mmap_': class 'std::unordered_map<std::string,caf::group_module_ptr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::group_module_ptr>>>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\group_manager.hpp(90,23): warning C4251: 'caf::group_manager::ad_hoc_id_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::group_manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric.hpp(37,22): warning C4251: 'caf::telemetry::metric::labels_': class 'std::vector<caf::telemetry::label,std::allocator<caf::telemetry::label>>'에서는 class 'caf::telemetry::metric'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(73,15): warning C4251: 'caf::telemetry::metric_family::prefix_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(74,15): warning C4251: 'caf::telemetry::metric_family::name_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(75,28): warning C4251: 'caf::telemetry::metric_family::label_names_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(76,15): warning C4251: 'caf::telemetry::metric_family::helptext_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_family.hpp(77,15): warning C4251: 'caf::telemetry::metric_family::unit_': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::telemetry::metric_family'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_registry.hpp(515,22): warning C4251: 'caf::telemetry::metric_registry::families_mx_': class 'std::mutex'에서는 class 'caf::telemetry::metric_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\telemetry\metric_registry.hpp(516,47): warning C4251: 'caf::telemetry::metric_registry::families_': class 'std::vector<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>,std::allocator<std::unique_ptr<caf::telemetry::metric_family,std::default_delete<caf::telemetry::metric_family>>>>'에서는 class 'caf::telemetry::metric_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(680,23): warning C4251: 'caf::actor_system::ids_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(692,30): warning C4251: 'caf::actor_system::logger_': class 'caf::intrusive_ptr<caf::logger>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(710,20): warning C4251: 'caf::actor_system::config_serv_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(713,20): warning C4251: 'caf::actor_system::spawn_serv_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(720,21): warning C4251: 'caf::actor_system::logger_dtor_done_': struct 'std::atomic<bool>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(723,22): warning C4251: 'caf::actor_system::logger_dtor_mtx_': class 'std::mutex'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(726,35): warning C4251: 'caf::actor_system::logger_dtor_cv_': class 'std::condition_variable'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(733,28): warning C4251: 'caf::actor_system::metrics_actors_includes_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(737,28): warning C4251: 'caf::actor_system::metrics_actors_excludes_': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(743,31): warning C4251: 'caf::actor_system::private_threads_': class 'caf::detail::private_thread_pool'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system.hpp(746,42): warning C4251: 'caf::actor_system::meta_objects_guard_': class 'caf::intrusive_ptr<caf::ref_counted>'에서는 class 'caf::actor_system'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\abstract_coordinator.hpp(80,23): warning C4251: 'caf::scheduler::abstract_coordinator::next_worker_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::scheduler::abstract_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\monitorable_actor.hpp(141,35): warning C4251: 'caf::monitorable_actor::cv_': class 'std::condition_variable'에서는 class 'caf::monitorable_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\monitorable_actor.hpp(144,18): warning C4251: 'caf::monitorable_actor::attachables_head_': class 'std::unique_ptr<caf::attachable,std::default_delete<caf::attachable>>'에서는 class 'caf::monitorable_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(43,20): warning C4251: 'caf::decorator::sequencer::f_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(44,20): warning C4251: 'caf::decorator::sequencer::g_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\decorator\sequencer.hpp(45,21): warning C4251: 'caf::decorator::sequencer::msg_types_': class 'std::set<std::string,std::less<std::string>,std::allocator<std::string>>'에서는 class 'caf::decorator::sequencer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\local_actor.hpp(452,14): warning C4251: 'caf::local_actor::last_request_id_': class 'caf::message_id'에서는 class 'caf::local_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\local_actor.hpp(455,51): warning C4251: 'caf::local_actor::initial_behavior_fac_': class 'caf::detail::unique_function<caf::behavior (caf::local_actor *)>'에서는 class 'caf::local_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(60,25): warning C4251: 'caf::detail::behavior_stack::elements_': class 'std::vector<caf::behavior,std::allocator<caf::behavior>>'에서는 class 'caf::detail::behavior_stack'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\behavior_stack.hpp(61,25): warning C4251: 'caf::detail::behavior_stack::erased_elements_': class 'std::vector<caf::behavior,std::allocator<caf::behavior>>'에서는 class 'caf::detail::behavior_stack'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\policy\downstream_messages.hpp(71,18): warning C4251: 'caf::policy::downstream_messages::nested::handler': class 'std::unique_ptr<caf::inbound_path,std::default_delete<caf::inbound_path>>'에서는 class 'caf::policy::downstream_messages::nested'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(639,16): warning C4251: 'caf::scheduled_actor::mailbox_': class 'caf::intrusive::fifo_inbox<caf::scheduled_actor::mailbox_policy>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(648,39): warning C4251: 'caf::scheduled_actor::awaited_responses_': class 'std::forward_list<caf::scheduled_actor::pending_response,std::allocator<caf::scheduled_actor::pending_response>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(651,52): warning C4251: 'caf::scheduled_actor::multiplexed_responses_': class 'caf::detail::unordered_flat_map<caf::message_id,caf::behavior,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(654,19): warning C4251: 'caf::scheduled_actor::default_handler_': class 'std::function<caf::skippable_result (caf::scheduled_actor *,caf::message &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(657,17): warning C4251: 'caf::scheduled_actor::error_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::error &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(660,16): warning C4251: 'caf::scheduled_actor::down_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::down_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(663,21): warning C4251: 'caf::scheduled_actor::node_down_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::node_down_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(666,16): warning C4251: 'caf::scheduled_actor::exit_handler_': class 'std::function<void (caf::scheduled_actor::pointer,caf::exit_msg &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(669,22): warning C4251: 'caf::scheduled_actor::stream_managers_': class 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(673,22): warning C4251: 'caf::scheduled_actor::pending_stream_managers_': class 'std::map<caf::stream_slot,caf::stream_manager_ptr,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const caf::stream_slot,caf::stream_manager_ptr>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(677,12): warning C4251: 'caf::scheduled_actor::max_batch_delay_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(686,30): warning C4251: 'caf::scheduled_actor::inbound_stream_metrics_': class 'std::unordered_map<caf::type_id_t,caf::local_actor::inbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::inbound_stream_metrics_t>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(689,31): warning C4251: 'caf::scheduled_actor::outbound_stream_metrics_': class 'std::unordered_map<caf::type_id_t,caf::local_actor::outbound_stream_metrics_t,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const caf::type_id_t,caf::local_actor::outbound_stream_metrics_t>>>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduled_actor.hpp(693,21): warning C4251: 'caf::scheduled_actor::exception_handler_': class 'std::function<caf::error (caf::scheduled_actor::pointer,std::exception_ptr &)>'에서는 class 'caf::scheduled_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\event_based_actor.hpp(39,41): warning C4251: 'caf::mixin::subscriber<B,D>::subscriptions_': class 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>'에서는 class 'caf::mixin::subscriber<B,D>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_pool.hpp(110,22): warning C4251: 'caf::actor_pool::workers_': class 'std::vector<caf::actor,std::allocator<caf::actor>>'에서는 class 'caf::actor_pool'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_pool.hpp(111,10): warning C4251: 'caf::actor_pool::policy_': class 'std::function<void (caf::actor_system &,caf::actor_pool::uplock &,const caf::actor_pool::actor_vec &,caf::mailbox_element_ptr &,caf::execution_unit *)>'에서는 class 'caf::actor_pool'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option.hpp(105,27): warning C4251: 'caf::config_option::buf_': class 'std::unique_ptr<char [],std::default_delete<char []>>'에서는 class 'caf::config_option'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\config_option_set.hpp(176,17): warning C4251: 'caf::config_option_set::opts_': class 'std::vector<caf::config_option,std::allocator<caf::config_option>>'에서는 class 'caf::config_option_set'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(79,12): warning C4251: 'caf::actor_system_config::content': class 'caf::dictionary<caf::config_value>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(181,15): warning C4251: 'caf::actor_system_config::program_name': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(184,15): warning C4251: 'caf::actor_system_config::remainder': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(200,15): warning C4251: 'caf::actor_system_config::slave_name': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(203,15): warning C4251: 'caf::actor_system_config::bootstrap_node': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(208,12): warning C4251: 'caf::actor_system_config::stream_max_batch_delay': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(211,12): warning C4251: 'caf::actor_system_config::stream_credit_round_interval': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(215,15): warning C4251: 'caf::actor_system_config::openssl_certificate': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(216,15): warning C4251: 'caf::actor_system_config::openssl_key': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(217,15): warning C4251: 'caf::actor_system_config::openssl_passphrase': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(218,15): warning C4251: 'caf::actor_system_config::openssl_capath': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(219,15): warning C4251: 'caf::actor_system_config::openssl_cafile': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(223,21): warning C4251: 'caf::actor_system_config::actor_factories': class 'std::unordered_map<std::string,caf::actor_factory,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::actor_factory>>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(224,25): warning C4251: 'caf::actor_system_config::module_factories': class 'std::vector<caf::actor_system_config::module_factory,std::allocator<caf::actor_system_config::module_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(225,23): warning C4251: 'caf::actor_system_config::hook_factories': class 'std::vector<caf::actor_system_config::hook_factory,std::allocator<caf::actor_system_config::hook_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(226,31): warning C4251: 'caf::actor_system_config::group_module_factories': class 'std::vector<caf::actor_system_config::group_module_factory,std::allocator<caf::actor_system_config::group_module_factory>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(230,16): warning C4251: 'caf::actor_system_config::thread_hooks_': class 'std::vector<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>,std::allocator<std::unique_ptr<caf::thread_hook,std::default_delete<caf::thread_hook>>>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(245,15): warning C4251: 'caf::actor_system_config::config_file_path': class 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(249,28): warning C4251: 'caf::actor_system_config::config_file_path_alternatives': class 'std::vector<std::string,std::allocator<std::string>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(328,30): warning C4251: 'caf::actor_system_config::c_args_remainder_': class 'std::vector<char *,std::allocator<char *>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\actor_system_config.hpp(329,21): warning C4251: 'caf::actor_system_config::c_args_remainder_buf_': class 'std::vector<char,std::allocator<char>>'에서는 class 'caf::actor_system_config'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\after.hpp(29,12): warning C4251: 'caf::timeout_definition_builder::tout_': class 'std::chrono::duration<__int64,std::nano>'에서는 class 'caf::timeout_definition_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\downstream_manager_base.hpp(99,12): warning C4251: 'caf::downstream_manager_base::paths_': class 'caf::detail::unordered_flat_map<caf::stream_slot,caf::downstream_manager::unique_path_ptr,std::allocator<std::pair<Key,T>>>'에서는 class 'caf::downstream_manager_base'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(53,35): warning C4251: 'caf::mixin::subscriber<B,D>::subscriptions_': class 'std::unordered_set<caf::group,std::hash<caf::group>,std::equal_to<caf::group>,std::allocator<caf::group>>'에서는 class 'caf::mixin::subscriber<B,D>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(127,14): warning C4251: 'caf::blocking_actor::receive_while_helper::stmt_': class 'std::function<bool (void)>'에서는 struct 'caf::blocking_actor::receive_while_helper'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(176,43): warning C4251: 'caf::blocking_actor::do_receive_helper::cb': class 'std::function<void (caf::blocking_actor::receive_cond &)>'에서는 struct 'caf::blocking_actor::do_receive_helper'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\blocking_actor.hpp(428,16): warning C4251: 'caf::blocking_actor::mailbox_': class 'caf::intrusive::fifo_inbox<caf::blocking_actor::mailbox_policy>'에서는 class 'caf::blocking_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scoped_actor.hpp(68,20): warning C4251: 'caf::scoped_actor::self_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::scoped_actor'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\message_builder.hpp(107,52): warning C4251: 'caf::message_builder::elements_': class 'std::vector<caf::detail::message_builder_element_ptr,std::allocator<caf::detail::message_builder_element_ptr>>'에서는 class 'caf::message_builder'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\proxy_registry.hpp(108,22): warning C4251: 'caf::proxy_registry::mtx_': class 'std::mutex'에서는 class 'caf::proxy_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\proxy_registry.hpp(109,42): warning C4251: 'caf::proxy_registry::proxies_': class 'std::unordered_map<caf::node_id,caf::proxy_registry::proxy_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::proxy_registry::proxy_map>>>'에서는 class 'caf::proxy_registry'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(359,16): warning C4251: 'caf::detail::simple_actor_clock::schedule_': class 'std::multimap<caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr,std::less<caf::actor_clock::time_point>,std::allocator<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>'에서는 class 'caf::detail::simple_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\simple_actor_clock.hpp(362,20): warning C4251: 'caf::detail::simple_actor_clock::actor_lookup_': class 'std::multimap<caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>,std::less<caf::actor_id>,std::allocator<std::pair<const caf::actor_id,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const caf::actor_clock::time_point,caf::detail::simple_actor_clock::unique_delayed_event_ptr>>>>>>>'에서는 class 'caf::detail::simple_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\test_actor_clock.hpp(14,14): warning C4251: 'caf::detail::test_actor_clock::current_time': class 'std::chrono::time_point<std::chrono::steady_clock,std::chrono::nanoseconds>'에서는 class 'caf::detail::test_actor_clock'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\test_coordinator.hpp(33,26): warning C4251: 'caf::scheduler::test_coordinator::jobs': class 'std::deque<caf::resumable *,std::allocator<caf::resumable *>>'에서는 class 'caf::scheduler::test_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\scheduler\test_coordinator.hpp(163,25): warning C4251: 'caf::scheduler::test_coordinator::after_next_enqueue_': class 'std::function<void (void)>'에서는 class 'caf::scheduler::test_coordinator'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(81,24): warning C4251: 'caf::detail::local_group_module::impl::mtx_': class 'std::mutex'에서는 class 'caf::detail::local_group_module::impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(84,20): warning C4251: 'caf::detail::local_group_module::impl::subscribers_': class 'std::set<caf::strong_actor_ptr,std::less<void>,std::allocator<caf::strong_actor_ptr>>'에서는 class 'caf::detail::local_group_module::impl'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(98,14): warning C4251: 'caf::detail::local_group_module::mtx_': class 'std::mutex'에서는 class 'caf::detail::local_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\local_group_module.hpp(100,17): warning C4251: 'caf::detail::local_group_module::instances_': class 'std::unordered_map<std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,caf::intrusive_ptr<caf::detail::local_group_module::impl>>>>'에서는 class 'caf::detail::local_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\group_tunnel.hpp(62,23): warning C4251: 'caf::detail::group_tunnel::cached_messages_': class 'std::vector<caf::detail::group_tunnel::cached_message,std::allocator<caf::detail::group_tunnel::cached_message>>'에서는 class 'caf::detail::group_tunnel'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(63,14): warning C4251: 'caf::detail::remote_group_module::mtx_': class 'std::mutex'에서는 class 'caf::detail::remote_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\detail\remote_group_module.hpp(65,13): warning C4251: 'caf::detail::remote_group_module::nodes_': class 'std::unordered_map<caf::node_id,caf::detail::remote_group_module::instances_map,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::detail::remote_group_module::instances_map>>>'에서는 class 'caf::detail::remote_group_module'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\manager.hpp(61,20): warning C4251: 'caf::io::network::manager::parent_': class 'caf::intrusive_ptr<caf::actor_control_block>'에서는 class 'caf::io::network::manager'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\receive_buffer.hpp(192,14): warning C4251: 'caf::io::network::receive_buffer::buffer_': class 'std::unique_ptr<char [],std::default_delete<char []>>'에서는 class 'caf::io::network::receive_buffer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\ip_endpoint.hpp(77,39): warning C4251: 'caf::io::network::ip_endpoint::ptr_': class 'std::unique_ptr<caf::io::network::ip_endpoint::impl,caf::io::network::ip_endpoint::impl_deleter>'에서는 struct 'caf::io::network::ip_endpoint'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(428,14): warning C4251: 'caf::io::abstract_broker::scribes_': class 'std::unordered_map<caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::intrusive_ptr<caf::io::scribe>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(429,15): warning C4251: 'caf::io::abstract_broker::doormen_': class 'std::unordered_map<caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::intrusive_ptr<caf::io::doorman>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(430,24): warning C4251: 'caf::io::abstract_broker::datagram_servants_': class 'std::unordered_map<caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,caf::intrusive_ptr<caf::io::datagram_servant>>>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\abstract_broker.hpp(431,15): warning C4251: 'caf::io::abstract_broker::dummy_wr_buf_': class 'std::vector<caf::byte,std::allocator<caf::byte>>'에서는 class 'caf::io::abstract_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\datagram_servant.hpp(26,69): warning C4251: 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>::hdl_': class 'caf::io::datagram_handle'에서는 class 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\datagram_servant.hpp(26,69): warning C4251: 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::datagram_manager,caf::io::datagram_handle,caf::io::new_datagram_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\doorman.hpp(25,51): warning C4251: 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>::hdl_': class 'caf::io::accept_handle'에서는 class 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\doorman.hpp(25,51): warning C4251: 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::acceptor_manager,caf::io::accept_handle,caf::io::new_connection_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\scribe.hpp(25,49): warning C4251: 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>::hdl_': class 'caf::io::connection_handle'에서는 class 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\scribe.hpp(25,49): warning C4251: 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>::activity_tokens_': class 'caf::optional<size_t>'에서는 class 'caf::io::broker_servant<caf::io::network::stream_manager,caf::io::connection_handle,caf::io::new_data_msg>'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\multiplexer.hpp(154,19): warning C4251: 'caf::io::network::multiplexer::tid_': class 'std::thread::id'에서는 class 'caf::io::network::multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(375,40): warning C4251: 'caf::io::middleman::backend_supervisor_': class 'std::unique_ptr<caf::io::network::multiplexer::supervisor,std::default_delete<caf::io::network::multiplexer::supervisor>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(378,15): warning C4251: 'caf::io::middleman::thread_': class 'std::thread'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(381,32): warning C4251: 'caf::io::middleman::named_brokers_': class 'std::map<std::string,caf::actor,std::less<std::string>,std::allocator<std::pair<const std::string,caf::actor>>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(384,19): warning C4251: 'caf::io::middleman::manager_': class 'caf::typed_actor<caf::result<uint16_t> (caf::publish_atom,uint16_t,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>,std::string,bool),caf::result<uint16_t> (caf::open_atom,uint16_t,std::string,bool),caf::result<caf::node_id,caf::strong_actor_ptr,std::set<std::string,std::less<std::string>,std::allocator<std::string>>> (caf::connect_atom,std::string,uint16_t),caf::result<void> (caf::unpublish_atom,caf::actor_addr,uint16_t),caf::result<void> (caf::close_atom,uint16_t),caf::result<caf::strong_actor_ptr> (caf::spawn_atom,caf::node_id,std::string,caf::message,std::set<std::string,std::less<std::string>,std::allocator<std::string>>),caf::result<caf::actor> (caf::get_atom,caf::group_atom,caf::node_id,std::string),caf::result<caf::node_id,std::string,uint16_t> (caf::get_atom,caf::node_id)>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(387,36): warning C4251: 'caf::io::middleman::background_tasks_': class 'std::vector<caf::io::middleman::background_task_ptr,std::allocator<caf::io::middleman::background_task_ptr>>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\middleman.hpp(390,35): warning C4251: 'caf::io::middleman::remote_groups_': class 'caf::intrusive_ptr<caf::detail::remote_group_module>'에서는 class 'caf::io::middleman'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(55,33): warning C4251: 'caf::detail::abstract_worker_hub::head_': struct 'std::atomic<caf::detail::abstract_worker *>'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(57,23): warning C4251: 'caf::detail::abstract_worker_hub::running_': struct 'std::atomic<unsigned __int64>'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(59,14): warning C4251: 'caf::detail::abstract_worker_hub::mtx_': class 'std::mutex'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker_hub.hpp(61,27): warning C4251: 'caf::detail::abstract_worker_hub::cv_': class 'std::condition_variable'에서는 class 'caf::detail::abstract_worker_hub'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\message_queue.hpp(50,14): warning C4251: 'caf::io::basp::message_queue::lock': class 'std::mutex'에서는 class 'caf::io::basp::message_queue'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\message_queue.hpp(61,26): warning C4251: 'caf::io::basp::message_queue::pending': class 'std::vector<caf::io::basp::message_queue::actor_msg,std::allocator<caf::io::basp::message_queue::actor_msg>>'에서는 class 'caf::io::basp::message_queue'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(74,22): warning C4251: 'caf::io::basp::routing_table::mtx_': class 'std::mutex'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(75,50): warning C4251: 'caf::io::basp::routing_table::direct_by_hdl_': class 'std::unordered_map<caf::io::connection_handle,caf::node_id,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::node_id>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(76,50): warning C4251: 'caf::io::basp::routing_table::direct_by_nid_': class 'std::unordered_map<caf::node_id,caf::io::connection_handle,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::connection_handle>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\routing_table.hpp(77,44): warning C4251: 'caf::io::basp::routing_table::indirect_': class 'std::unordered_map<caf::node_id,caf::io::basp::routing_table::node_id_set,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::io::basp::routing_table::node_id_set>>>'에서는 class 'caf::io::basp::routing_table'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\detail\abstract_worker.hpp(38,33): warning C4251: 'caf::detail::abstract_worker::next_': struct 'std::atomic<caf::detail::abstract_worker *>'에서는 class 'caf::detail::abstract_worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\worker.hpp(93,10): warning C4251: 'caf::io::basp::worker::hdr_': struct 'caf::io::basp::header'에서는 class 'caf::io::basp::worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\worker.hpp(96,15): warning C4251: 'caf::io::basp::worker::payload_': class 'std::vector<caf::byte,std::allocator<caf::byte>>'에서는 class 'caf::io::basp::worker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\instance.hpp(219,23): warning C4251: 'caf::io::basp::instance::published_actors_': class 'std::unordered_map<uint16_t,caf::io::basp::instance::published_actor,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::basp::instance::published_actor>>>'에서는 class 'caf::io::basp::instance'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp\instance.hpp(223,30): warning C4251: 'caf::io::basp::instance::hub_': class 'caf::detail::worker_hub<caf::io::basp::worker>'에서는 class 'caf::io::basp::instance'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(130,11): warning C4251: 'caf::io::basp_broker::ctx': class 'std::unordered_map<caf::io::connection_handle,caf::io::basp::endpoint_context,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::basp::endpoint_context>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(138,38): warning C4251: 'caf::io::basp_broker::spawn_servers': class 'std::unordered_map<caf::node_id,caf::actor,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,caf::actor>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(142,56): warning C4251: 'caf::io::basp_broker::node_observers': class 'std::unordered_map<caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<std::pair<const caf::node_id,std::vector<caf::actor_addr,std::allocator<caf::actor_addr>>>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\basp_broker.hpp(154,23): warning C4251: 'caf::io::basp_broker::monitored_actors': class 'std::unordered_map<caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>,std::hash<caf::actor_addr>,std::equal_to<caf::actor_addr>,std::allocator<std::pair<const caf::actor_addr,std::unordered_set<caf::node_id,std::hash<caf::node_id>,std::equal_to<caf::node_id>,std::allocator<caf::node_id>>>>>'에서는 class 'caf::io::basp_broker'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(339,14): warning C4251: 'caf::io::network::test_multiplexer::mx_': class 'std::mutex'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(340,27): warning C4251: 'caf::io::network::test_multiplexer::cv_': class 'std::condition_variable'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(341,28): warning C4251: 'caf::io::network::test_multiplexer::resumables_': class 'std::list<caf::io::network::test_multiplexer::resumable_ptr,std::allocator<caf::io::network::test_multiplexer::resumable_ptr>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(342,23): warning C4251: 'caf::io::network::test_multiplexer::scribes_': class 'std::map<std::pair<std::string,uint16_t>,caf::io::connection_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::connection_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(343,23): warning C4251: 'caf::io::network::test_multiplexer::doormen_': class 'std::unordered_map<uint16_t,caf::io::accept_handle,std::hash<caf::type_id_t>,std::equal_to<caf::type_id_t>,std::allocator<std::pair<const uint16_t,caf::io::accept_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(344,19): warning C4251: 'caf::io::network::test_multiplexer::scribe_data_': class 'std::unordered_map<caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data,std::hash<caf::io::connection_handle>,std::equal_to<caf::io::connection_handle>,std::allocator<std::pair<const caf::io::connection_handle,caf::io::network::test_multiplexer::scribe_data>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(345,20): warning C4251: 'caf::io::network::test_multiplexer::doorman_data_': class 'std::unordered_map<caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::network::test_multiplexer::doorman_data>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(346,40): warning C4251: 'caf::io::network::test_multiplexer::local_endpoints_': class 'std::map<uint16_t,caf::io::datagram_handle,std::less<caf::policy::downstream_messages::key_type>,std::allocator<std::pair<const uint16_t,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(347,41): warning C4251: 'caf::io::network::test_multiplexer::remote_endpoints_': class 'std::map<std::pair<std::string,uint16_t>,caf::io::datagram_handle,std::less<std::pair<std::string,uint16_t>>,std::allocator<std::pair<const std::pair<std::string,uint16_t>,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(348,24): warning C4251: 'caf::io::network::test_multiplexer::pending_connects_': class 'std::unordered_multimap<caf::io::accept_handle,caf::io::connection_handle,std::hash<caf::io::accept_handle>,std::equal_to<caf::io::accept_handle>,std::allocator<std::pair<const caf::io::accept_handle,caf::io::connection_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(349,25): warning C4251: 'caf::io::network::test_multiplexer::pending_endpoints_': class 'std::unordered_map<int64_t,caf::io::datagram_handle,std::hash<int64_t>,std::equal_to<int64_t>,std::allocator<std::pair<const int64_t,caf::io::datagram_handle>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(350,21): warning C4251: 'caf::io::network::test_multiplexer::datagram_data_': class 'std::unordered_map<caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>,std::hash<caf::io::datagram_handle>,std::equal_to<caf::io::datagram_handle>,std::allocator<std::pair<const caf::io::datagram_handle,std::shared_ptr<caf::io::network::test_multiplexer::datagram_data>>>>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_io\caf\io\network\test_multiplexer.hpp(356,25): warning C4251: 'caf::io::network::test_multiplexer::inline_runnable_callback_': class 'std::function<void (void)>'에서는 class 'caf::io::network::test_multiplexer'의 클라이언트에서 DLL 인터페이스를 사용하도록 지정해야 합니다.
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\stateful_actor.hpp(75,9): warning C4996: 'caf::stateful_actor<ClientInfo,caf::event_based_actor>::non_static_name_member': non-static 'State::name' members have no effect since 0.18
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\exec_main.hpp(114,10): warning C4996: 'caf::exec_main': override config_file_path in the config class instead
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\exec_main.hpp(81,21): warning C4996: 'caf::actor_system_config::parse': set the config_file_path member instead
         D:\GitHub\WeizenbierGame\caf\libcaf_core\caf\expected.hpp(51,35): warning C4244: '초기화 중': '__int64'에서 'T'(으)로 변환하면서 데이터가 손실될 수 있습니다.

    경고 233개
    오류 0개

경과 시간: 00:00:05.32
